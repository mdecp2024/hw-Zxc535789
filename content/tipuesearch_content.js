var tipuesearch = {"pages": [{'title': '關於', 'text': '國立虎尾科技大學機械設計工程系 \n 國立台灣大學 \n 機械設計工程系 \n cp2024 電腦程式 \n 課程教材： \n 使用 Jupyter 學習 Python （ 網站 、 電子書 ） \n 教育版帳號 microsoftonline 登錄點:\xa0  https://login.microsoftonline.com/ \n 團隊線上教學： \n 以「學號@nfu.edu.tw」登入 https://login.microsoftonline.com/  Office 365 \n Teams 團隊代碼：\xa0  fqpabi8 \n 個人倉儲：  https://github.com/mdecp2024/hw-Zxc535789 \n 個人網站：  https://mdecp2024.github.io/hw-Zxc535789/ \n 其他資訊： \n cd2023_pj3ag4_zmq_football_4.7.7z \n cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z \n', 'tags': '', 'url': '關於.html'}, {'title': 'Attendance', 'text': '出席 (10%) - 自行舉證評分 \n 自行利用 Github commits 提交記錄評分. \n', 'tags': '', 'url': 'Attendance.html'}, {'title': 'HW 1', 'text': '主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%) \n USB 隨身碟: \n 下載  python_2025_lite.7z  (428 MB, 解開壓縮後約 1.5 GB) \n Jupyter \n What are Github and Codespaces? \n Hello World - GitHub Docs \n 利用包含學號的字串作為帳號, 申請免費使用 Github. \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 1 \n \n PART 1: Creating the basics 資料整理 (10%) \n 啟動可攜程式系統後, 在命令列中: \n y:\\>cd notebook \n y:\\notebook>jupyter lab --collaborative \n 進入  01_string_input_print.ipynb  練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過  https://nbviewer.org/  將已經提交的  01_string_input_print.ipynb , 嵌入下列網頁中. \n \n 上列 iframe 標註的 html 語法: \n <iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"></iframe> \n 完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 1.html'}, {'title': 'HW 1 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 1 Exam.html'}, {'title': 'w7', 'text': '\n \n \n', 'tags': '', 'url': 'w7.html'}, {'title': 'w10', 'text': '題目一 \n \n 題目二 \n \n \n \n', 'tags': '', 'url': 'w10.html'}, {'title': 'w11_hw', 'text': '1.\xa0 已知可以用 Python 程式 由上往下列印三角形 * , 或 由左往右列印三角形 * , 請將此程式延伸到可以在 10x10 的字元區域中, 以 "*" 字元列印出圓型區域. 完成後請將程式碼存入個人 Gist 後, 直接在個人作業網站中的 Brython 頁面中執行. (提示: ?src=gist_script_URL) \n 第一題 \xa0 字號圖形 \n import math\n\ndef print_circle(radius, center_x, center_y, grid_size):\n    # 遍歷每個位置\n    for y in range(grid_size):\n        for x in range(grid_size):\n            # 計算當前位置到圓心的距離\n            distance = math.sqrt((x - center_x)**2 + (y - center_y)**2)\n            # 判斷這個位置是否在圓的範圍內\n            if abs(distance - radius) < 0.5:  # 這個值可以調整精度\n                print("*", end="")\n            else:\n                print(" ", end="")\n        print()  # 換行\n\n# 設定圓的參數\nradius = 4\ncenter_x = 5  # 圓心 X 座標\ncenter_y = 5  # 圓心 Y 座標\ngrid_size = 10  # 網格大小 (10x10)\n\n# 打印圓形\nprint_circle(radius, center_x, center_y, grid_size)\n \n 2. 已知可以在網頁中利用 Brython 繪製方格與塗色, 如下連結, 請設法修改此一程式, 直接將程式存入個人的 Gist, 並利用黑色方塊圍出一個圓形區域. \n \n 第二題\xa0 網頁上的方格與塗色 \n 3. 完成上列題目後, 請利用 Youtube 影片 簡報 個人的解題過程與心得. \n \n w11 數列練習 \n from browser import html\nfrom browser import document as doc\n \n# 利用 html 建立 canvas 超文件物件\ncanvas = html.CANVAS(width=400, height=400)\nbrython_div = doc["brython_div1"]\nbrython_div <= canvas\n \n#每一個的pixcel數\ngs = 20\n \n#gs"tc = canvas width and height\n \nctx = canvas.getContext("2d")\nwidth = 11\nheight = 11\n \n \nfor i in range(width):\n     for j in range(height):\n         #dRect(i*gs,j*gs,gs,gs,1,"lightgray"\n          ctx.lineWidth = 1\n          ctx.strokeStyle = \'lightgray\'\n          ctx.beginPath();\n          ctx.rect(i*gs,j*gs,gs,gs)\n          ctx.stroke(); \n \n', 'tags': '', 'url': 'w11_hw.html'}, {'title': 'w12', 'text': '', 'tags': '', 'url': 'w12.html'}, {'title': 'w13_hw', 'text': '兩個紅色支架框 \n 兩個方形加藍線 \n from browser import html\nfrom browser import document as doc\n\n# 利用 html 建立 canvas 超文件物件\ncanvas = html.CANVAS(width=400, height=400)\nbrython_div = doc["brython_div1"]\nbrython_div <= canvas\n\nctx = canvas.getContext("2d")\nctx.lineWidth = 1\n\n# 繪製兩個矩形\nctx.strokeStyle = \'red\'  # 設定矩形顏色為紅色\nctx.beginPath() \nctx.rect(10, 10, 200, 200)\nctx.rect(110, 110, 200, 200)\nctx.stroke()\n\n# 繪製對角線，顏色設定為藍色\nctx.strokeStyle = \'blue\'  # 設定對角線顏色為藍色\nctx.beginPath() \nctx.moveTo(10, 10)\nctx.lineTo(210, 210)\nctx.stroke() \n w13 作業 \n from browser import html\nfrom browser import document as doc\n\n# 建立 canvas 元素\ncanvas = html.CANVAS(width=500, height=500)\nbrython_div = doc["brython_div1"]\nbrython_div <= canvas\n\n# 定義圓心和半徑\nx1, y1 = 200, 200  # 第一個圓的圓心\nx2, y2 = 300, 300  # 第二個圓的圓心\nradius = 141.4  # 圓的半徑\n\nctx = canvas.getContext("2d")\n\n# === 繪製第一個圓 ===\nctx.beginPath()\nctx.arc(x1, y1, radius, 0, 2 * 3.14159)\nctx.fillStyle = "lightgreen"  # 更改為淺綠色\nctx.fill()\n\n# === 繪製重疊區域 (黑色交集區塊) ===\nctx.save()  # 保存繪圖狀態\nctx.beginPath()\nctx.arc(x1, y1, radius, 0, 2 * 3.14159)\nctx.clip()  # 限制繪圖範圍為第一個圓\n\nctx.beginPath()\nctx.arc(x2, y2, radius, 0, 2 * 3.14159)\nctx.fillStyle = "darkblue"  # 更改為深藍色\nctx.fill()\nctx.restore()  # 恢復繪圖狀態\n\n# === 填充第一個圓其他區域 ===\n# 填充左半部分 (橙色)\nctx.beginPath()\nctx.moveTo(x1, y1)\nctx.arc(x1, y1, radius, 3.14159, 3.14159 * 1.5, False)\nctx.closePath()\nctx.fillStyle = "orange"  # 更改為橙色\nctx.fill()\n\n# 填充上半部分 (青色)\nctx.beginPath()\nctx.moveTo(x1, y1)\nctx.arc(x1, y1, radius, 3.14159 * 1.5, 0, False)\nctx.closePath()\nctx.fillStyle = "cyan"  # 更改為青色\nctx.fill()\n\n# 填充左下部分 (黃色)\nctx.beginPath()\nctx.moveTo(x1, y1)\nctx.arc(x1, y1, radius, 3.14159 * 0.5, 3.14159, False)\nctx.closePath()\nctx.fillStyle = "yellow"  # 更改為黃色\nctx.fill()\n\n# === 填充第二個圓區域 ===\n\n# 填充右上部分 (淺珊瑚色)\nctx.beginPath()\nctx.moveTo(x2, y2)\nctx.arc(x2, y2, radius, 3.14159 * 1.5, 0, False)\nctx.closePath()\nctx.fillStyle = "lightcoral"  # 更改為淺珊瑚色\nctx.fill()\n\n# 填充右下部分 (淺灰色)\nctx.beginPath()\nctx.moveTo(x2, y2)\nctx.arc(x2, y2, radius, 0, 3.14159 * 0.5, False)\nctx.closePath()\nctx.fillStyle = "lightgray"  # 更改為淺灰色\nctx.fill()\n\n# 填充下半部分 (萊姆綠色)\nctx.beginPath()\nctx.moveTo(x2, y2)\nctx.arc(x2, y2, radius, 3.14159 * 0.5, 3.14159, False)\nctx.closePath()\nctx.fillStyle = "limegreen"  # 更改為萊姆綠色\nctx.fill()\n\n# === 繪製輔助框架與對角線 ===\n# 繪製兩個圓的邊框\nctx.lineWidth = 2\nctx.strokeStyle = "black"\nctx.beginPath()\nctx.arc(x1, y1, radius, 0, 2 * 3.14159)\nctx.stroke()\n\nctx.beginPath()\nctx.arc(x2, y2, radius, 0, 2 * 3.14159)\nctx.stroke()\n\n# 繪製正方形框架\nctx.lineWidth = 2\nctx.strokeStyle = "red"\n\n# 第一個正方形（紫羅蘭色）\nctx.beginPath()\nctx.rect(100, 100, 200, 200)\nctx.stroke()\nctx.fillStyle = "violet"  # 填充為紫羅蘭色\nctx.fill()\n\n# 第二個正方形（橙色）\nctx.beginPath()\nctx.rect(200, 200, 200, 200)\nctx.stroke()\nctx.fillStyle = "orange"  # 填充為橙色\nctx.fill()\n\n# 繪製對角線（藍色）\nctx.lineWidth = 2\nctx.strokeStyle = "blue"  # 更改為藍色\nctx.beginPath()\nctx.moveTo(100, 100)\nctx.lineTo(300, 300)\nctx.stroke()\n \n \n', 'tags': '', 'url': 'w13_hw.html'}, {'title': 'w14_hw', 'text': '三個交錯圓 \n from browser import html\nfrom browser import document as doc\nimport random\n\n# 定義一個函式來初始化畫布\ndef initialize_canvas(canvas_width=400, canvas_height=400, id="brython_div1"):\n    # 創建 canvas 並設置寬度與高度\n    canvas = html.CANVAS(width=canvas_width, height=canvas_height)\n    brython_div = doc[id]\n    brython_div <= canvas\n    \n    # 獲取 canvas 的 2D 上下文\n    ctx = canvas.getContext("2d")\n    \n    return canvas, ctx\n\n# 定義一個隨機顏色生成函式\ndef random_color_generator():\n    r = random.randint(0, 255)\n    g = random.randint(0, 255)\n    b = random.randint(0, 255)\n    return f"rgb({r}, {g}, {b})"\n\n# 判斷點 (px, py) 是否在圓內\ndef is_point_in_circle(px, py, cx, cy, r):\n    return (px - cx) ** 2 + (py - cy) ** 2 <= r ** 2\n\n# 使用者設定的圓心座標和半徑，並進行掃描線填充\ndef draw_circles(x1, y1, r1, x2, y2, r2, x3, y3, r3):\n    # 初始化畫布\n    canvas, ctx = initialize_canvas(400, 400)\n    \n    # 清除畫布\n    ctx.clearRect(0, 0, canvas.width, canvas.height)\n    \n    # 顏色區域存儲\n    color_dict = {}\n\n    # 使用掃描線方法填充區域\n    for py in range(0, canvas.height):\n        # 逐行掃描，判斷每個點是否在圓內\n        current_color = None  # 當前掃描線區域的顏色\n        for px in range(0, canvas.width):\n            in_circle1 = is_point_in_circle(px, py, x1, y1, r1)\n            in_circle2 = is_point_in_circle(px, py, x2, y2, r2)\n            in_circle3 = is_point_in_circle(px, py, x3, y3, r3)\n            \n            if in_circle1 and in_circle2 and in_circle3:\n                # 所有圓的交集\n                if "intersection_all" not in color_dict:\n                    color_dict["intersection_all"] = random_color_generator()\n                current_color = color_dict["intersection_all"]\n            elif in_circle1 and in_circle2:\n                # 圓1與圓2的交集\n                if "intersection_1_2" not in color_dict:\n                    color_dict["intersection_1_2"] = random_color_generator()\n                current_color = color_dict["intersection_1_2"]\n            elif in_circle2 and in_circle3:\n                # 圓2與圓3的交集\n                if "intersection_2_3" not in color_dict:\n                    color_dict["intersection_2_3"] = random_color_generator()\n                current_color = color_dict["intersection_2_3"]\n            elif in_circle1 and in_circle3:\n                # 圓1與圓3的交集\n                if "intersection_1_3" not in color_dict:\n                    color_dict["intersection_1_3"] = random_color_generator()\n                current_color = color_dict["intersection_1_3"]\n            elif in_circle1:\n                # 只在圓1內\n                if "circle1" not in color_dict:\n                    color_dict["circle1"] = random_color_generator()\n                current_color = color_dict["circle1"]\n            elif in_circle2:\n                # 只在圓2內\n                if "circle2" not in color_dict:\n                    color_dict["circle2"] = random_color_generator()\n                current_color = color_dict["circle2"]\n            elif in_circle3:\n                # 只在圓3內\n                if "circle3" not in color_dict:\n                    color_dict["circle3"] = random_color_generator()\n                current_color = color_dict["circle3"]\n            else:\n                # 點不在三個圓內，畫外區域\n                current_color = "white"  # 背景色白色\n\n            # 填充顏色\n            ctx.fillStyle = current_color\n            ctx.fillRect(px, py, 1, 1)  # 填充一個像素\n\n# 直接設定三個圓的圓心和半徑\nx1, y1, r1 = 150, 200, 100  # 圓1：圓心 (150, 200)，半徑 100\nx2, y2, r2 = 250, 200, 100  # 圓2：圓心 (250, 200)，半徑 100\nx3, y3, r3 = 200, 150, 100  # 圓3：圓心 (200, 150)，半徑 100\n\n# 呼叫畫圓函式\ndraw_circles(x1, y1, r1, x2, y2, r2, x3, y3, r3) \n', 'tags': '', 'url': 'w14_hw.html'}, {'title': 'w15', 'text': '作業 \n # sum 初始值設為 0\nsum = 0\n \ndef addto(init, upto):\n    global sum  # 使用全域變數 sum\n    # 利用 for 重複迴圈與變數加法進行累加\n    for i in range(init, upto+1):\n        sum = sum + i\n    print("從" + str(init) + "累加到" + str(upto) + "=" + str(sum))\n \naddto(1, 100) \n', 'tags': '', 'url': 'w15.html'}, {'title': 'HW 2', 'text': '主題: Python 的數列、判斷式與重複迴圈 (20%) \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 2 and Part 3 \n \n 延續 HW 1 網頁資料整理與程式練習方法, 整理下列內容 (20%): \n PART 2: Introduction to lists and if/else statements \n PART 3: Introduction to the for loop \n 完成上述流程整理後, 請將 HW2 自評分數輸入 cp2024 自評表單中. \n \n \n \n', 'tags': '', 'url': 'HW 2.html'}, {'title': 'HW 2 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 2 Exam.html'}, {'title': 'HW 3', 'text': '主題: Python 的數字、演算法與迴圈 (20%) \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 4 and Part 5 \n 完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 3.html'}, {'title': 'HW 3 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n w5 \n', 'tags': '', 'url': 'HW 3 Exam.html'}, {'title': 'W5', 'text': '\n #help(range)\nfor i in range(1, 6, 2):\nprint(i, end="")\nprint()\n\n\n# 設定金字塔的高度\nheight= 30\n\n使用for迴圈列印金字塔\nfor i in range(height):\n# 列印空格\nprint(\' \' * (height - i - 1 + 2), end=\' \')#增加兩個空格\n# 列印星號\nprint(\'*\' * (2 * i + 1)) \n \n \xa0 \n \n', 'tags': '', 'url': 'W5.html'}, {'title': 'help(print)', 'text': '\n \n \n \n \n \n', 'tags': '', 'url': 'help(print).html'}, {'title': '1', 'text': '', 'tags': '', 'url': '1.html'}, {'title': '2', 'text': '', 'tags': '', 'url': '2.html'}, {'title': '3', 'text': '', 'tags': '', 'url': '3.html'}, {'title': '4', 'text': '', 'tags': '', 'url': '4.html'}, {'title': '5', 'text': '', 'tags': '', 'url': '5.html'}, {'title': '6', 'text': '', 'tags': '', 'url': '6.html'}, {'title': '7', 'text': '', 'tags': '', 'url': '7.html'}, {'title': '8', 'text': '', 'tags': '', 'url': '8.html'}, {'title': '9', 'text': '', 'tags': '', 'url': '9.html'}, {'title': '10', 'text': '', 'tags': '', 'url': '10.html'}, {'title': '11', 'text': '', 'tags': '', 'url': '11.html'}, {'title': 'w8', 'text': '今天做的東西 \n 操作步驟: \n \n 下載\xa0 python_2025_lite.7z \xa0(可攜程式環境) \n 下載 \xa0 zmq_remote_api_ex_cube_triangle.7z \xa0(利用 Python 控制模擬場景中的物件) \n 進入可攜程式環境中 data/CoppeliaSim 目錄, 開啟 coppeliaSim.exe (機電整合模擬程式, \xa0 原始碼 ) \n 啟動可攜程式環境, 雙點擊 start_ipv6.bat, 系統會啟動四個命令列, 兩個 SciTE 編輯器 \n 執行場景控制程式前, 先處理操作系統的防火牆, 將下列指令存為 .bat 檔案後, 以管理員身分執行, 以便開啟 23000-23050 埠號進出: \n netsh advfirewall firewall add rule name="allow_23000-23050" dir=in action=allow protocol=TCP localport=23000-23050 netsh advfirewall firewall add rule name="allow_23000-23050" dir=out action=allow protocol=TCP localport=23000-23050 \n 開啟 CoppeliaSim 中的視覺串流伺服器: Modules - Connectivity - Visualization stream \n 利用 SciTE 開啟\xa0put_cubes_into_scene_1.py, 利用 Tools - Go 執行操控程式 \n 使用者可以透過瀏覽器, 以模擬場景所在電腦的 IP, 且埠號為 23020 觀看模擬場景 \n \n 我的程式 \n from coppeliasim_zmqremoteapi_client import RemoteAPIClient import time import keyboard \n # 利用 zmqRemoteAPI 以 23000 對場景伺服器進行連線 client = RemoteAPIClient(\'120.113.99.10\', 23000) # 以 getObject 方法取得場景物件 sim = client.getObject(\'sim\') box = sim.getObject(\'/box\') \n # 啟動模擬 sim.startSimulation() \n # 設定立方體的尺寸和初始位置 cube_size = 0.2 # 20 cm spacing = 0.5 # 50 cm 之間的距離（可根據需求調整） \n # 擺放立方體的行數和每行的數量 rows = 5 # 從第 1 行到第 5 行 cubes_in_row = [1, 3, 5, 7, 9] # 每行立方體的數量 \n # 在正的 Y 方向擺放立方體 for row in range(rows):  # 計算每行的起始 x 位置，讓其對稱  start_row_x = - (cubes_in_row[row] - 1) * spacing / 2    for col in range(cubes_in_row[row]):  # 計算每個立方體的位置  x_position = start_row_x + col * spacing  y_position = row * spacing # 垂直方向上每行間距    # 建立立方體  cube_handle = sim.createPrimitiveShape(sim.primitiveshape_cuboid, [cube_size, cube_size, cube_size], 0)  sim.setObjectPosition(cube_handle, -1, [x_position, y_position, cube_size / 2]) # z 方向上升到立方體的中心 \n # 在負的 Y 方向擺放立方體 for row in range(rows):  # 計算每行的起始 x 位置，讓其對稱  start_row_x = - (cubes_in_row[row] - 1) * spacing / 2    for col in range(cubes_in_row[row]):  # 計算每個立方體的位置  x_position = start_row_x + col * spacing  y_position = -row * spacing # 負的 Y 方向    # 建立立方體  cube_handle = sim.createPrimitiveShape(sim.primitiveshape_cuboid, [cube_size, cube_size, cube_size], 0)  sim.setObjectPosition(cube_handle, -1, [x_position, y_position, cube_size / 2]) # z 方向上升到立方體的中心 \n # 完成立方體的擺放 print("立方體已成功擺放!") \n # 設定主迴圈 while True:  # 在這裡可以進行其他模擬操作  time.sleep(0.1) # 確保循環不會過快 \n if keyboard.is_pressed(\'q\'):  # 可以按下 q 鍵跳出重複執行迴圈  break \n 終止模擬 sim.stopSimulation() \n \n \n', 'tags': '', 'url': 'w8.html'}, {'title': 'HW 4', 'text': '主題: 利用 Python 控制機電模擬系統 (20%) \n 利用\xa0 https://solvespace.com/ \xa0建立機械系統零組件 \n 利用  CoppeliaSim  建立機電模擬系統 \n 利用  Python  跨網路控制瀏覽器上的機電模擬系統 \n 範例: \n cd2023_pj3ag4_zmq_football_4.7.7z \n cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z \n 完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 4.html'}, {'title': 'HW 4 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n <h1>Brython</h1>\n<p>從 1 累加到 100:</p>\n<p><button id="add1to100">1 add to 100</button></p>\n<!-- 導入 brython 程式庫 -->\n<p>\n<script src="./../cmsimde/static/brython.js"></script>\n<script src="./../cmsimde/static/brython_stdlib.js"></script>\n</p>\n<!-- 啟動 Brython -->\n<p>\n<script>// <![CDATA[\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n// ]]></script>\n</p>\n<p><!-- 導入 FileSaver 與 filereader --></p>\n<p>\n<script type="text/javascript" src="./../cmsimde/static/ace/FileSaver.min.js"></script>\n<script type="text/javascript" src="./../cmsimde/static/ace/filereader.js"></script>\n</p>\n<p><!-- 導入 ace --></p>\n<p>\n<script type="text/javascript" src="./../cmsimde/static/ace/ace.js"></script>\n<script type="text/javascript" src="./../cmsimde/static/ace/ext-language_tools.js"></script>\n<script type="text/javascript" src="./../cmsimde/static/ace/mode-python3.js"></script>\n<script type="text/javascript" src="./../cmsimde/static/ace/snippets/python.js"></script>\n</p>\n<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->\n<script src="./../cmsimde/static/Cango-24v03-min.js"></script>\n<script src="./../cmsimde/static/gearUtils-09.js"></script>\n<script src="./../cmsimde/static/SVGpathUtils-6v03-min.js"></script>\n<script src="./../cmsimde/static/sylvester.js"></script>\n<script src="./../cmsimde/static/PrairieDraw.js"></script>\n</p>\n<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>\n<p>\n<script type="text/javascript">// <![CDATA[\nfunction doSave(storage_id, filename){\n    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});\n    filename = document.getElementById(filename).value\n    saveAs(blob, filename+".py");\n}\n// ]]></script>\n</p>\n<p>\n<script type="text/python3">// <![CDATA[\nfrom browser import document as doc\nimport ace\n# 清除畫布\ndef clear_bd1(ev):\n    bd = doc["brython_div1"]\n    bd.clear()\nAce1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )\n# 從 gist 取出程式碼後, 放入 editor 作為 default 程式\ndef run1():\n    # 利用 get 取下 src 變數值\n    try:\n        url = doc.query["src"]\n    except:\n        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"\n    prog = open(url).read()\n\n    # 將程式載入編輯區\n    Ace1.editor.setValue(prog)\n    Ace1.editor.scrollToRow(0)\n    Ace1.editor.gotoLine(0)\n    # 直接執行程式\n    #ns = {\'__name__\':\'__main__\'}\n    #exec(prog, ns)\n    # 按下 run 按鈕\n    Ace1.run()\n\n# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定\ndoc[\'kw_run1\'].bind(\'click\', Ace1.run)\ndoc[\'kw_show_console1\'].bind(\'click\', Ace1.show_console)\ndoc[\'kw_clear_console1\'].bind(\'click\', Ace1.clear_console)\ndoc[\'clear_bd1\'].bind(\'click\', clear_bd1)\n# 呼叫函式執行\nrun1()\n// ]]></script>\n</p>\n<p><!-- add 1 to 100 開始 -->\n<script type="text/python3">// <![CDATA[\nfrom browser import document as doc\nimport ace\n\n# 清除畫布\ndef clear_bd1(ev):\n    bd = doc["brython_div1"]\n    bd.clear()\n\n# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件\nAce2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )\n\nadd1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"\n\n# 從 gist 取得程式碼\nadd_src = open(add1to100_url).read()\ndef add(ev):\n    Ace2.editor.setValue(add_src)\n    Ace2.editor.scrollToRow(0)\n    Ace2.editor.gotoLine(0)\n    Ace2.run()\n\n# id 為 "add1to100" 的按鈕點按時, 執行 add 方法\ndoc["add1to100"].bind(\'click\', add)\n// ]]></script>\n</p>\n<p><!-- add 1 to 100 結束--></p>\n<!-- editor1 開始 -->\n<p><!-- 用來顯示程式碼的 editor 區域 --></p>\n<div id="kw_editor1" style="width: 600px; height: 300px;"></div>\n<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>\n<p><!-- 存擋表單開始 --></p>\n<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text">.py</label> <input onclick="doSave(\'kw_py_src1\', \'kw_filename1\');" type="submit" value="Save"></form>\n<p><!-- 存擋表單結束 --></p>\n<p></p>\n<p><!-- 執行與清除按鈕開始 --></p>\n<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>\n<p><!-- 執行與清除按鈕結束 --></p>\n<p></p>\n<p><!-- 程式執行 ouput 區 --></p>\n<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>\n<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>\n<div id="brython_div1"></div>\n<!-- editor1 結束 --><hr><!-- ########################################## -->\n<p>從 1 累加到 100 part2:</p>\n<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>\n<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>\n<p>\n<script type="text/python3">// <![CDATA[\nfrom browser import document as doc\nimport ace\n# 清除畫布\ndef clear_bd2(ev):\n    bd = doc["brython_div2"]\n    bd.clear()\nAce3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )\n# 從 gist 取出程式碼後, 放入 editor 作為 default 程式\ndef run2():\n    # 利用 get 取下 src 變數值\n    try:\n        url = doc.query["src2"]\n    except:\n        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"\n    prog = open(url).read()\n\n    # 將程式載入編輯區\n    Ace3.editor.setValue(prog)\n    Ace3.editor.scrollToRow(0)\n    Ace3.editor.gotoLine(0)\n    # 直接執行程式\n    #ns = {\'__name__\':\'__main__\'}\n    #exec(prog, ns)\n    # 按下 run 按鈕\n    Ace3.run()\n\n# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定\ndoc[\'kw_run2\'].bind(\'click\', Ace3.run)\ndoc[\'kw_show_console2\'].bind(\'click\', Ace3.show_console)\ndoc[\'kw_clear_console2\'].bind(\'click\', Ace3.clear_console)\ndoc[\'clear_bd2\'].bind(\'click\', clear_bd2)\n# 呼叫函式執行\nrun2()\n// ]]></script>\n</p>\n<p><!-- add 1 to 100 part2 開始 -->\n<script type="text/python3">// <![CDATA[\nfrom browser import document as doc\nimport ace\n\n# 清除畫布\ndef clear_bd2(ev):\n    bd = doc["brython_div2"]\n    bd.clear()\n\n# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件\nAce4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )\n\n# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區\n\nclass button2:\n    def __init__(self, url):\n        self.url = url\n\n    # 記得加入 event 輸入變數\n    def do(self,ev):\n        Ace4.editor.setValue(open(self.url).read())\n        Ace4.editor.scrollToRow(0)\n        Ace4.editor.gotoLine(0)\n        Ace4.run()\n\nadd1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"\n\n# 從 gist 取得程式碼\nadd_src = open(add1to100_url).read()\ndef add2(ev):\n    Ace4.editor.setValue(add_src)\n    Ace4.editor.scrollToRow(0)\n    Ace4.editor.gotoLine(0)\n    Ace4.run()\n\n# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法\ndoc["add1to100part2"].bind(\'click\', add2)\n# 以下為運用 button2 class 的通用 gist 程式導入區\n################################## cango_three_gears start\ncango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"\ncango_three_gears = button2(cango_three_gears_url)\ndoc["cango_three_gears"].bind("click", cango_three_gears.do)\n################################## cango_three_gears end\n################################## bsnake start\nbsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"\nbsnake = button2(bsnake_url)\ndoc["bsnake"].bind("click", bsnake.do)\n################################## bsnake end\n################################## aitetris start\naitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"\naitetris = button2(aitetris_url)\ndoc["aitetris"].bind("click", aitetris.do)\n################################## aitetris end\n################################## threejsblock start\nthreejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"\nthreejsblock = button2(threejsblock_url)\ndoc["threejsblock"].bind("click", threejsblock.do)\n################################## threejsblock end\n// ]]></script>\n</p>\n<p><!-- add 1 to 100 part2 結束--></p>\n<!-- editor2 開始 -->\n<p><!-- 用來顯示程式碼的 editor 區域 --></p>\n<div id="kw_editor2" style="width: 600px; height: 300px;"></div>\n<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>\n<p><!-- 存擋表單開始 --></p>\n<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text">.py</label> <input onclick="doSave(\'kw_py_src2\', \'kw_filename2\');" type="submit" value="Save"></form>\n<p><!-- 存擋表單結束 --></p>\n<p></p>\n<p><!-- 執行與清除按鈕開始 --></p>\n<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>\n<p><!-- 執行與清除按鈕結束 --></p>\n<p></p>\n<p><!-- 程式執行 ouput 區 --></p>\n<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>\n<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>\n<div id="brython_div2"></div>\n<!-- editor2 結束 --><hr>\n<p>\n<script type="text/javascript" src="https://unpkg.com/three@0.144.0/build/three.js"></script>\n</p> \n', 'tags': '', 'url': 'HW 4 Exam.html'}, {'title': 'Final Report', 'text': '期末口頭與書面專題報告 (20%) \n 期末口頭專題報告影片: \n ...... \n 期末書面專題報告檔案 (pdf): \n ...... \n 電腦輔助設計與實習課程總結心得: \n ...... \n 期末報告自評成績: \n 完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'Final Report.html'}, {'title': 'Brython', 'text': '從 1 累加到 100: \n 1 add to 100 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};