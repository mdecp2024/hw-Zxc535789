var tipuesearch = {"pages": [{'title': '關於', 'text': '國立虎尾科技大學機械設計工程系 \n 國立台灣大學 \n 機械設計工程系 \n cp2024 電腦程式 \n 課程教材： \n 使用 Jupyter 學習 Python （ 網站 、 電子書 ） \n 教育版帳號 microsoftonline 登錄點:\xa0  https://login.microsoftonline.com/ \n 團隊線上教學： \n 以「學號@nfu.edu.tw」登入 https://login.microsoftonline.com/  Office 365 \n Teams 團隊代碼：\xa0  fqpabi8 \n 個人倉儲：  https://github.com/mdecp2024/hw-Zxc535789 \n 個人網站：  https://mdecp2024.github.io/hw-Zxc535789/ \n 其他資訊： \n cd2023_pj3ag4_zmq_football_4.7.7z \n cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z \n', 'tags': '', 'url': '關於.html'}, {'title': 'Attendance', 'text': '出席 (10%) - 自行舉證評分 \n 自行利用 Github commits 提交記錄評分. \n', 'tags': '', 'url': 'Attendance.html'}, {'title': 'HW 1', 'text': '主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%) \n USB 隨身碟: \n 下載  python_2025_lite.7z  (428 MB, 解開壓縮後約 1.5 GB) \n Jupyter \n What are Github and Codespaces? \n Hello World - GitHub Docs \n 利用包含學號的字串作為帳號, 申請免費使用 Github. \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 1 \n \n PART 1: Creating the basics 資料整理 (10%) \n 啟動可攜程式系統後, 在命令列中: \n y:\\>cd notebook \n y:\\notebook>jupyter lab --collaborative \n 進入  01_string_input_print.ipynb  練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過  https://nbviewer.org/  將已經提交的  01_string_input_print.ipynb , 嵌入下列網頁中. \n \n 上列 iframe 標註的 html 語法: \n <iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"></iframe> \n 完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 1.html'}, {'title': 'HW 1 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 1 Exam.html'}, {'title': 'w7', 'text': '\n \n \n', 'tags': '', 'url': 'w7.html'}, {'title': 'w10', 'text': '題目一 \n \n 題目二 \n \n \n \n', 'tags': '', 'url': 'w10.html'}, {'title': 'w11_hw', 'text': '1.\xa0 已知可以用 Python 程式 由上往下列印三角形 * , 或 由左往右列印三角形 * , 請將此程式延伸到可以在 10x10 的字元區域中, 以 "*" 字元列印出圓型區域. 完成後請將程式碼存入個人 Gist 後, 直接在個人作業網站中的 Brython 頁面中執行. (提示: ?src=gist_script_URL) \n 第一題 \xa0 字號圖形 \n import math\n\ndef print_circle(radius, center_x, center_y, grid_size):\n    # 遍歷每個位置\n    for y in range(grid_size):\n        for x in range(grid_size):\n            # 計算當前位置到圓心的距離\n            distance = math.sqrt((x - center_x)**2 + (y - center_y)**2)\n            # 判斷這個位置是否在圓的範圍內\n            if abs(distance - radius) < 0.5:  # 這個值可以調整精度\n                print("*", end="")\n            else:\n                print(" ", end="")\n        print()  # 換行\n\n# 設定圓的參數\nradius = 4\ncenter_x = 5  # 圓心 X 座標\ncenter_y = 5  # 圓心 Y 座標\ngrid_size = 10  # 網格大小 (10x10)\n\n# 打印圓形\nprint_circle(radius, center_x, center_y, grid_size)\n \n 2. 已知可以在網頁中利用 Brython 繪製方格與塗色, 如下連結, 請設法修改此一程式, 直接將程式存入個人的 Gist, 並利用黑色方塊圍出一個圓形區域. \n \n 第二題\xa0 網頁上的方格與塗色 \n 3. 完成上列題目後, 請利用 Youtube 影片 簡報 個人的解題過程與心得. \n \n w11 數列練習 \n from browser import html\nfrom browser import document as doc\n \n# 利用 html 建立 canvas 超文件物件\ncanvas = html.CANVAS(width=400, height=400)\nbrython_div = doc["brython_div1"]\nbrython_div <= canvas\n \n#每一個的pixcel數\ngs = 20\n \n#gs"tc = canvas width and height\n \nctx = canvas.getContext("2d")\nwidth = 11\nheight = 11\n \n \nfor i in range(width):\n     for j in range(height):\n         #dRect(i*gs,j*gs,gs,gs,1,"lightgray"\n          ctx.lineWidth = 1\n          ctx.strokeStyle = \'lightgray\'\n          ctx.beginPath();\n          ctx.rect(i*gs,j*gs,gs,gs)\n          ctx.stroke(); \n \n', 'tags': '', 'url': 'w11_hw.html'}, {'title': 'w12_hw', 'text': '第一題:Text, questions, and art (文字、問題和藝術) \n 說明: input為輸入()中為問題,使用者輸入之答案會變成返回的值 \n input()程式範例: \n What\'s your name? \n name = input("What\'s your name? ")  # 提示使用者輸入名字\nprint(f"My name is , {name}!")            # 使用 f-string 輸出打招呼的訊息\ninput("What\'s your name?") \n print()程式範例:  貓 \n print ("   /\\_/\\   ")\nprint (" >^.^<   ")\nprint ("    / \\    ")\nprint ("   (___)___") \n 第二題: 變數 \n 說明:Variables and string concatenation(變數和字串連接) \n 範例： name \n first_name = "yu" #變數first_name為"自己的姓"\nlast_name  = "chang" #變數last_name為"自己的名"\nprint (first_name) #列印變數first_name\nprint (last_name) #列印變數last_name \n 範例程式:  name+favorite food \n name = input("What\'s your name?") #變數name為input所輸入之文字\nfavorite_food = input ("What is your favorite food?") #變數favorite_food為input所輸入之文字\nprint ("Hi! My name is " + name) #列印"Hi! My name is "(這段為文字) + name(name這個變數的數值)\nprint ("My favorite food is " + favorite_food)  #列印"My favorite food is "(這段為文字) + favorite_food(favorite_food這個變數的數值)\nprint (name + "\'s favorite food is " + favorite_food) #列印name (數值)+ \'s favorite food is (此段為文字)+favorite_food(數值) \n 第三題:In a bookstore(在書店) \n 說明:Lists and if... in... / else... (列表和 if... in... / else...) \n 範例程式: if \n programming_books = ["Learn python", "Python for all",  "Intro to python"]\nprint (programming_books)\nwanted_book = input("Hi! What book would you like to buy?")\nprint (wanted_book)\nif wanted_book in programming_books:\n    print ("Yes, we sell it!")\nelse:\n    print ("Sorry, we don\'t sell that book") \n 第四題: append()和remove() \n 說明: 使用append()進行加入接著使用remove()移除清單內無需購買之物品 \n 範例程式:\xa0  購物清單 \n shopping_list = ["carrots", "chocolate", "olives"] #在shopping_list變數裡面有3個字串\nprint (shopping_list) #列印shopping_list變數\nnew_item = input("What else do I have to buy?") #設定一個變數為new_item其等於input指令回傳之數值\n  \nif new_item in shopping_list:  #如果 "變數new_item(想買的物品)"回傳之值 在"shopping_list(購物清單)"字串當中就執行以下程式\n    print (new_item + " is/are already in the shopping list") #列印 "new_item變數的數值"+字串is/are already in the shopping list\n    print (shopping_list) #列印shopping_list字串\nelse:                    #反之\n    shopping_list.append(new_item) #購物清單.加入(想要購買的物品)    如果不在購物清單內那就將未在字串中物品加入購物清單\n    print (shopping_list) #列印購物清單\n#以下是移除物品的程式\nitem_to_remove = input("What do I have to remove?") #item_to_remove(想要移除的物品)\n  \nif item_to_remove in shopping_list: #如果 想要移除的物品在購物清單中 那就執行\n    shopping_list.remove(item_to_remove) #把購物清單.移除(想要移除的物品)\n    print (shopping_list) #列印購物清單\nelse:                     #反之\n    print (item_to_remove + " is/are not in the list") #列印 想要移除的物品+is/are not in the list(不在清單中)\n    print (shopping_list) #列印購物清單\n \n 第五題:Customizing the menu(自訂菜單) \n 說明:List methods: .index(), .pop(), and .insert() (列表方法: .index(), .pop(), and .insert()) \n 範例程式:\xa0  menu \n todays_menu = ["burger", "salad", "coke"] #todays_menu變數=今天菜單["burger", "salad", "coke"\nside_dish_index = todays_menu.index("salad") #side_dish_index變數 = 今日菜單.找出"沙拉"位於字串中第幾個\nprint (side_dish_index) #列印side_dish_index  列印他在第幾位\ntodays_menu.pop(side_dish_index) #今日菜單.移除字串中的元素(side_dish_index變數"沙拉")  這裡意思是移除沙拉\nprint (todays_menu) #列印今日菜單\ntodays_menu.insert(side_dish_index, "fries") #今日菜單.在字串中插入(side_dish_index, "fries")   這裡意思是加入薯條\nprint (todays_menu) #列印今日菜單 \n 第六題:Traveling around the world(環遊世界) \n 說明: List slicing(串列切片) \n 範例程式:  city \n # 定義一個名為 cities 的串列，包含五個城市名稱\ncities = ["San Diego", "Prague", "Cape Town", "Tokyo", "Melbourne"]\n   \n# 列印整個串列\nprint (cities)  # [\'San Diego\', \'Prague\', \'Cape Town\', \'Tokyo\', \'Melbourne\']\n   \n# 列印索引為 1 的元素\nprint (cities[1])  # \'Prague\'\n   \n# 列印從索引 1 到 3 的元素（不包含索引 4）\nprint (cities[1:4])  # [\'Prague\', \'Cape Town\', \'Tokyo\']\n   \n# 列印從索引 1 到 3 的元素，間隔為 2\nprint (cities[1:4:2])  # [\'Prague\', \'Tokyo\']\n   \n# 列印從索引 0 到 2 的元素（不包含索引 3）\nprint (cities[0:3])  # [\'San Diego\', \'Prague\', \'Cape Town\']\n   \n# 列印從開始到索引 2 的元素（不包含索引 3）\nprint (cities[:3])  # [\'San Diego\', \'Prague\', \'Cape Town\']\n   \n# 列印從索引 2 到 4 的元素（不包含索引 5）\nprint (cities[2:5])  # [\'Cape Town\', \'Tokyo\', \'Melbourne\']\n   \n# 列印從索引 2 到最後的元素\nprint (cities[2:])  # [\'Cape Town\', \'Tokyo\', \'Melbourne\']\n   \n# 列印從索引 0 到 4 的元素，每隔 2 個元素\nprint (cities[0:5:2])  # [\'San Diego\', \'Cape Town\', \'Melbourne\']\n   \n# 列印從頭到尾的元素，每隔 2 個元素\nprint (cities[::2])  # [\'San Diego\', \'Cape Town\', \'Melbourne\']\n   \n# 列印索引為 4 的元素\nprint (cities[4])  # \'Melbourne\'\n   \n# 列印最後一個元素（索引 -1）\nprint (cities[-1])  # \'Melbourne\'\n   \n# 列印從索引 -4 到 -2 的元素（不包含索引 -1）\nprint (cities[-4:-1])  # [\'Prague\', \'Cape Town\', \'Tokyo\']\n   \n# 列印從索引 3 到 1，反向取值\nprint (cities[3:0:-1])  # [\'Tokyo\', \'Cape Town\', \'Prague\']\n   \n# 列印從索引 -2 到 -4，反向取值\nprint (cities[-2:-5:-1])  # [\'Tokyo\', \'Cape Town\', \'Prague\']\n   \n# 列印整個串列，反轉順序\nprint (cities[::-1])  # [\'Melbourne\', \'Tokyo\', \'Cape Town\', \'Prague\', \'San Diego\'] \n \n 第七題:Senses, planets, and a houseng(感官、行星、房子) \n 說明:Changing, adding, and removing list elements using slicing(透過切片操作來更改、添加和刪除串列中的元素) \n 範例程式:  感官 \n # 定義一個包含五種感官的清單\nsenses = ["eyes", "nose", "ears", "tongue", "skin"]\nprint(senses)  # 輸出原始的感官清單\n   \n# 將清單中索引為1的元素從 "nose" 改為 "smell"\nsenses[1] = "smell"\nprint(senses)  # 輸出更新後的感官清單\n   \n# 將索引範圍為3到5的元素（"tongue", "skin"）改為 ["taste", "touch"]\nsenses[3:5] = ["taste", "touch"]\nprint(senses)  # 輸出更新後的感官清單\n   \n# 將索引範圍從0到3，步長為2的元素（"eyes", "ears"）改為 ["sight", "hearing"]\nsenses[0:3:2] = ["sight", "hearing"]\nprint(senses)  # 輸出最終更新後的感官清單 \n 範例程式:  行星 \n # 定義一個行星列表\nplanets = ["Mercury", "Mars", "Earth", "Neptune"]\n# 輸出原始行星列表\nprint(planets)\n   \n# 將 "Jupiter" 加入列表的末尾\nplanets = planets + ["Jupiter"]\n# 輸出更新後的行星列表\nprint(planets)\n   \n# 在索引 2 前插入 "Venus"\n# 先取出索引 0 到 1 的元素，然後加上 "Venus" 和索引 2 到 4 的元素\nplanets = planets[0:2] + ["Venus"] + planets[2:5]\n# 輸出再次更新的行星列表\nprint(planets)\n   \n# 在索引 5 位置後插入 "Uranus" 和 "Saturn"\n# 取出索引 0 到 4 的元素，加上新元素，然後加上索引 5 之後的元素\nplanets = planets[:5] + ["Uranus", "Saturn"] + planets[5:]\n# 輸出最終的行星列表 \n 範例程式: 房子 \n house = ["kitchen", "dining room", "living room", "bedroom", "bathoom", "garden", "balcony", "terrace"]\nprint(house)  # 原始列表\n   \n# 刪除 "dining room"\ndel house[1]\nprint(house)  # ["kitchen", "living room", "bedroom", "bathoom", "garden", "balcony", "terrace"]\n   \n# 刪除 "garden" 和 "balcony"\ndel house[4:6]\nprint(house)  # ["kitchen", "living room", "bedroom", "bathoom", "terrace"]\n   \n# 刪除 "kitchen", "bedroom", 和 "terrace"\ndel house[::2]\nprint(house)  # ["living room", "bathoom"]\n   \n# 刪除整個清單\ndel house\ntry:\n    print(house)  # 此處會觸發 NameError\nexcept NameError:\n    print("The variable \'house\' no longer exists.") \n 第八題:My friends\' favorite dishes( 我朋友最喜歡的菜 ) \n 說明:for ... in range() (循環控制語句) \n 範例程式:  我朋友最喜歡的菜 \n # 定義朋友的名字列表\nfriends = ["Geetha", "Luca", "Daisy", "Juhan"]  \n   \n# 定義喜愛的食物列表\ndishes  = ["sushi", "burgers", "tacos", "pizza"]  \n   \n# 打印朋友的名字\nprint("My friends\' names are:")  \nprint(friends)  \n   \n# 使用 for 迴圈遍歷朋友列表，打印索引和對應的朋友名字\nfor index in range(0, 4):  \n    print("index:  " + str(index))  # 打印當前索引\n    print("friend: " + friends[index])  # 打印對應的朋友名字\n   \n# 打印喜愛的食物\nprint("Their favorite dishes are:")  \nprint(dishes)  \n   \n# 使用 for 迴圈遍歷食物列表，打印索引和對應的食物\nfor index in range(0, 4):  \n    print("index:  " + str(index))  # 打印當前索引\n    print("dish: " + dishes[index])  # 打印對應的食物\n   \n# 使用 for 迴圈，同時列出朋友和他們喜愛的食物\nfor index in range(0, 4):  \n    print("My friend " + friends[index] + "\'s favorite dish is " + dishes[index])\n \n 第九題: At the zoo( 在動物園) \n 說明:For loop with if... == ... / else (在 for 迴圈中 逐一遍歷（迭代） 元素，並使用 if...else 條件判斷) \n 範例程式:\xa0  動物 \n # 動物清單\nanimals = ["giraffe", "penguin", "dolphin"]\nprint(animals)  # 輸出清單\n   \n# 針對清單中的每個位置進行操作\nfor i in range(0, len(animals)):  # 使用 len() 動態取得清單長度\n    print("-- Beginning of loop --")\n    # 輸出每個元素及其位置\n    print("The element in position " + str(i) + " is " + animals[i])\n   \n# 想要看到的動物\nwanted_to_see = "penguin"\n   \n# 針對清單中的每個位置進行操作\nfor i in range(0, len(animals)):\n    # 如果當前的動物是想看的那個\n    if animals[i] == wanted_to_see:\n        # 輸出特別訊息\n        print("I saw a " + animals[i] + " and I really wanted to see it!")\n    # 如果當前的動物不是特別想看的那個\n    else:\n        # 輸出一般訊息\n        print("I saw a " + animals[i]) \n 第十題 :Where are my gloves? ( 我的手套在哪裡？ ) \n 說明:For loop for searching(在 for 迴圈中 逐一遍歷（迭代） 元素，並使用 if...else 條件判斷)) \n 範例程式:\xa0  物品位置 \n accessories = ["belt", "hat", "gloves", "sunglasses", "ring"]\nprint(accessories)\n   \n# 逐一列出元素及其位置\nfor i in range(len(accessories)):\n    print(f"The element {accessories[i]} is in position {i}")\n   \n# 列出長度等於 6 的元素\nfor i in range(len(accessories)):\n    if len(accessories[i]) == 6:\n        print(f"The element {accessories[i]} is in position {i} and it has 6 characters")\n   \n# 列出長度小於 6 的元素\nfor i in range(len(accessories)):\n    if len(accessories[i]) < 6:\n        print(f"The element {accessories[i]} is in position {i} and it has less than 6 characters")\n   \n# 定義閾值：6，列出長度大於 6 的元素\nn_of_characters = 6\nfor i in range(len(accessories)):\n    if len(accessories[i]) > n_of_characters:\n        print(f"The element {accessories[i]} is in position {i} and it has more than {n_of_characters} characters")\n   \n# 定義閾值：6，列出長度不等於 6 的元素\nfor i in range(len(accessories)):\n    if len(accessories[i]) != n_of_characters:\n        print(f"The element {accessories[i]} is in position {i} and it has a number of characters different from {n_of_characters}")\n   \n# 定義閾值：2，列出位置小於或等於 2 的元素\nposition = 2\nfor i in range(len(accessories)):\n    if i <= position:\n        print(f"The element {accessories[i]} is in position {i}, which is less than or equal to {position}")\n   \n# 定義閾值：2，列出位置大於或等於 2 的元素\nfor i in range(len(accessories)):\n    if i >= position:\n        print(f"The element {accessories[i]} is in position {i}, which is at least {position}")\n \n', 'tags': '', 'url': 'w12_hw.html'}, {'title': 'w13_hw', 'text': '兩個紅色支架框 \n 兩個方形加藍線 \n from browser import html\nfrom browser import document as doc\n\n# 利用 html 建立 canvas 超文件物件\ncanvas = html.CANVAS(width=400, height=400)\nbrython_div = doc["brython_div1"]\nbrython_div <= canvas\n\nctx = canvas.getContext("2d")\nctx.lineWidth = 1\n\n# 繪製兩個矩形\nctx.strokeStyle = \'red\'  # 設定矩形顏色為紅色\nctx.beginPath() \nctx.rect(10, 10, 200, 200)\nctx.rect(110, 110, 200, 200)\nctx.stroke()\n\n# 繪製對角線，顏色設定為藍色\nctx.strokeStyle = \'blue\'  # 設定對角線顏色為藍色\nctx.beginPath() \nctx.moveTo(10, 10)\nctx.lineTo(210, 210)\nctx.stroke() \n w13 作業 \n from browser import html\nfrom browser import document as doc\n\n# 建立 canvas 元素\ncanvas = html.CANVAS(width=500, height=500)\nbrython_div = doc["brython_div1"]\nbrython_div <= canvas\n\n# 定義圓心和半徑\nx1, y1 = 200, 200  # 第一個圓的圓心\nx2, y2 = 300, 300  # 第二個圓的圓心\nradius = 141.4  # 圓的半徑\n\nctx = canvas.getContext("2d")\n\n# === 繪製第一個圓 ===\nctx.beginPath()\nctx.arc(x1, y1, radius, 0, 2 * 3.14159)\nctx.fillStyle = "lightgreen"  # 更改為淺綠色\nctx.fill()\n\n# === 繪製重疊區域 (黑色交集區塊) ===\nctx.save()  # 保存繪圖狀態\nctx.beginPath()\nctx.arc(x1, y1, radius, 0, 2 * 3.14159)\nctx.clip()  # 限制繪圖範圍為第一個圓\n\nctx.beginPath()\nctx.arc(x2, y2, radius, 0, 2 * 3.14159)\nctx.fillStyle = "darkblue"  # 更改為深藍色\nctx.fill()\nctx.restore()  # 恢復繪圖狀態\n\n# === 填充第一個圓其他區域 ===\n# 填充左半部分 (橙色)\nctx.beginPath()\nctx.moveTo(x1, y1)\nctx.arc(x1, y1, radius, 3.14159, 3.14159 * 1.5, False)\nctx.closePath()\nctx.fillStyle = "orange"  # 更改為橙色\nctx.fill()\n\n# 填充上半部分 (青色)\nctx.beginPath()\nctx.moveTo(x1, y1)\nctx.arc(x1, y1, radius, 3.14159 * 1.5, 0, False)\nctx.closePath()\nctx.fillStyle = "cyan"  # 更改為青色\nctx.fill()\n\n# 填充左下部分 (黃色)\nctx.beginPath()\nctx.moveTo(x1, y1)\nctx.arc(x1, y1, radius, 3.14159 * 0.5, 3.14159, False)\nctx.closePath()\nctx.fillStyle = "yellow"  # 更改為黃色\nctx.fill()\n\n# === 填充第二個圓區域 ===\n\n# 填充右上部分 (淺珊瑚色)\nctx.beginPath()\nctx.moveTo(x2, y2)\nctx.arc(x2, y2, radius, 3.14159 * 1.5, 0, False)\nctx.closePath()\nctx.fillStyle = "lightcoral"  # 更改為淺珊瑚色\nctx.fill()\n\n# 填充右下部分 (淺灰色)\nctx.beginPath()\nctx.moveTo(x2, y2)\nctx.arc(x2, y2, radius, 0, 3.14159 * 0.5, False)\nctx.closePath()\nctx.fillStyle = "lightgray"  # 更改為淺灰色\nctx.fill()\n\n# 填充下半部分 (萊姆綠色)\nctx.beginPath()\nctx.moveTo(x2, y2)\nctx.arc(x2, y2, radius, 3.14159 * 0.5, 3.14159, False)\nctx.closePath()\nctx.fillStyle = "limegreen"  # 更改為萊姆綠色\nctx.fill()\n\n# === 繪製輔助框架與對角線 ===\n# 繪製兩個圓的邊框\nctx.lineWidth = 2\nctx.strokeStyle = "black"\nctx.beginPath()\nctx.arc(x1, y1, radius, 0, 2 * 3.14159)\nctx.stroke()\n\nctx.beginPath()\nctx.arc(x2, y2, radius, 0, 2 * 3.14159)\nctx.stroke()\n\n# 繪製正方形框架\nctx.lineWidth = 2\nctx.strokeStyle = "red"\n\n# 第一個正方形（紫羅蘭色）\nctx.beginPath()\nctx.rect(100, 100, 200, 200)\nctx.stroke()\nctx.fillStyle = "violet"  # 填充為紫羅蘭色\nctx.fill()\n\n# 第二個正方形（橙色）\nctx.beginPath()\nctx.rect(200, 200, 200, 200)\nctx.stroke()\nctx.fillStyle = "orange"  # 填充為橙色\nctx.fill()\n\n# 繪製對角線（藍色）\nctx.lineWidth = 2\nctx.strokeStyle = "blue"  # 更改為藍色\nctx.beginPath()\nctx.moveTo(100, 100)\nctx.lineTo(300, 300)\nctx.stroke()\n \n \n', 'tags': '', 'url': 'w13_hw.html'}, {'title': 'w14_hw', 'text': '三個交錯圓 \n from browser import html\nfrom browser import document as doc\nimport random\n\n# 定義一個函式來初始化畫布\ndef initialize_canvas(canvas_width=400, canvas_height=400, id="brython_div1"):\n    # 創建 canvas 並設置寬度與高度\n    canvas = html.CANVAS(width=canvas_width, height=canvas_height)\n    brython_div = doc[id]\n    brython_div <= canvas\n    \n    # 獲取 canvas 的 2D 上下文\n    ctx = canvas.getContext("2d")\n    \n    return canvas, ctx\n\n# 定義一個隨機顏色生成函式\ndef random_color_generator():\n    r = random.randint(0, 255)\n    g = random.randint(0, 255)\n    b = random.randint(0, 255)\n    return f"rgb({r}, {g}, {b})"\n\n# 判斷點 (px, py) 是否在圓內\ndef is_point_in_circle(px, py, cx, cy, r):\n    return (px - cx) ** 2 + (py - cy) ** 2 <= r ** 2\n\n# 使用者設定的圓心座標和半徑，並進行掃描線填充\ndef draw_circles(x1, y1, r1, x2, y2, r2, x3, y3, r3):\n    # 初始化畫布\n    canvas, ctx = initialize_canvas(400, 400)\n    \n    # 清除畫布\n    ctx.clearRect(0, 0, canvas.width, canvas.height)\n    \n    # 顏色區域存儲\n    color_dict = {}\n\n    # 使用掃描線方法填充區域\n    for py in range(0, canvas.height):\n        # 逐行掃描，判斷每個點是否在圓內\n        current_color = None  # 當前掃描線區域的顏色\n        for px in range(0, canvas.width):\n            in_circle1 = is_point_in_circle(px, py, x1, y1, r1)\n            in_circle2 = is_point_in_circle(px, py, x2, y2, r2)\n            in_circle3 = is_point_in_circle(px, py, x3, y3, r3)\n            \n            if in_circle1 and in_circle2 and in_circle3:\n                # 所有圓的交集\n                if "intersection_all" not in color_dict:\n                    color_dict["intersection_all"] = random_color_generator()\n                current_color = color_dict["intersection_all"]\n            elif in_circle1 and in_circle2:\n                # 圓1與圓2的交集\n                if "intersection_1_2" not in color_dict:\n                    color_dict["intersection_1_2"] = random_color_generator()\n                current_color = color_dict["intersection_1_2"]\n            elif in_circle2 and in_circle3:\n                # 圓2與圓3的交集\n                if "intersection_2_3" not in color_dict:\n                    color_dict["intersection_2_3"] = random_color_generator()\n                current_color = color_dict["intersection_2_3"]\n            elif in_circle1 and in_circle3:\n                # 圓1與圓3的交集\n                if "intersection_1_3" not in color_dict:\n                    color_dict["intersection_1_3"] = random_color_generator()\n                current_color = color_dict["intersection_1_3"]\n            elif in_circle1:\n                # 只在圓1內\n                if "circle1" not in color_dict:\n                    color_dict["circle1"] = random_color_generator()\n                current_color = color_dict["circle1"]\n            elif in_circle2:\n                # 只在圓2內\n                if "circle2" not in color_dict:\n                    color_dict["circle2"] = random_color_generator()\n                current_color = color_dict["circle2"]\n            elif in_circle3:\n                # 只在圓3內\n                if "circle3" not in color_dict:\n                    color_dict["circle3"] = random_color_generator()\n                current_color = color_dict["circle3"]\n            else:\n                # 點不在三個圓內，畫外區域\n                current_color = "white"  # 背景色白色\n\n            # 填充顏色\n            ctx.fillStyle = current_color\n            ctx.fillRect(px, py, 1, 1)  # 填充一個像素\n\n# 直接設定三個圓的圓心和半徑\nx1, y1, r1 = 150, 200, 100  # 圓1：圓心 (150, 200)，半徑 100\nx2, y2, r2 = 250, 200, 100  # 圓2：圓心 (250, 200)，半徑 100\nx3, y3, r3 = 200, 150, 100  # 圓3：圓心 (200, 150)，半徑 100\n\n# 呼叫畫圓函式\ndraw_circles(x1, y1, r1, x2, y2, r2, x3, y3, r3) \n \n', 'tags': '', 'url': 'w14_hw.html'}, {'title': 'w15', 'text': '題目一 \n total = 0\nfor i in range(1, 101):  # range(1, 101) 代表從 1 到 100\n    total += i\nprint(total) \n \n 題目二 \n # 定義一個 addto 函數來計算總和\ndef addto(start, end):\n    total = 0\n    for i in range(start, end + 1):\n        total += i\n    return total\n\n# 輸入兩個數字\nnum1 = int(input("請輸入第一個數字: "))\nnum2 = int(input("請輸入第二個數字: "))\n\n# 確保 num1 小於 num2\nstart = min(num1, num2)\nend = max(num1, num2)\n\n# 計算總和\nsum = addto(start, end)\n\nprint(f"{num1} 到 {num2} 之間所有數字的總和是: {sum}")\n \n \n', 'tags': '', 'url': 'w15.html'}, {'title': 'HW 2', 'text': '主題: Python 的數列、判斷式與重複迴圈 (20%) \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 2 and Part 3 \n \n 延續 HW 1 網頁資料整理與程式練習方法, 整理下列內容 (20%): \n PART 2: Introduction to lists and if/else statements \n PART 3: Introduction to the for loop \n 完成上述流程整理後, 請將 HW2 自評分數輸入 cp2024 自評表單中. \n \n \n \n', 'tags': '', 'url': 'HW 2.html'}, {'title': 'HW 2 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 2 Exam.html'}, {'title': 'w16_exam1', 'text': 'exam1 程式連結 \n from browser import document, html\nimport math\n# 初始化 HTML，確保 canvas 元素存在\ndef setup_canvas():\n    if not document.querySelector("#my_canvas"):\n        canvas = html.CANVAS(id="my_canvas", width=800, height=600)\n        document <= canvas\nsetup_canvas()\n \n# Set up canvas\ncanvas = document["my_canvas"]\nctx = canvas.getContext("2d")\n \n# Set origin (32, 13)\norigin_x, origin_y = 32, 13    \n \n# Draw X-axis\nctx.beginPath()\nctx.moveTo(origin_x, origin_y)\nctx.lineTo(500, origin_y)\nctx.strokeStyle = "black"\nctx.lineWidth = 2\nctx.stroke()\n \n# Draw Y-axis\nctx.beginPath()\nctx.moveTo(origin_x, origin_y)\nctx.lineTo(origin_x, 300)\nctx.stroke()\n \n# Label origin\nctx.font = "12px Arial"\nctx.fillStyle = "black"\nctx.fillText("(32, 13)", origin_x + 5, origin_y - 5)\n \n# Draw shapes\n# Adjusted placement to fix alignment issue\n \n# Hexagon (Orange)\nhex_x, hex_y = 100, 100\nctx.beginPath()\nfor i in range(6):\n    angle = i * (2 * math.pi / 6)\n    x = hex_x + 30 * math.cos(angle)\n    y = hex_y + 30 * math.sin(angle)\n    if i == 0:\n        ctx.moveTo(x, y)\n    else:\n        ctx.lineTo(x, y)\nctx.closePath()\nctx.fillStyle = "orange"\nctx.fill()\n \n# Diamond (Teal)\nctx.beginPath()\nctx.moveTo(160, 70)\nctx.lineTo(180, 100)\nctx.lineTo(160, 130)\nctx.lineTo(140, 100)\nctx.closePath()\nctx.fillStyle = "teal"\nctx.fill()\n \n# Triangle (Teal)\nctx.beginPath()\nctx.moveTo(165, 130)\nctx.lineTo(205, 130)\nctx.lineTo(185, 100)\nctx.closePath()\nctx.fillStyle = "blue"\nctx.fill()\n \n# Circle (Pink)\nctx.beginPath()\nctx.arc(230, 100, 30, 0, 2 * math.pi)\nctx.fillStyle = "pink"\nctx.fill()\n \n# Square (Yellow)\nctx.beginPath()\nctx.rect(265, 75, 50, 50)\nctx.fillStyle = "yellow"\nctx.fill()\n \n# Rectangle (Blue)\nctx.beginPath()\nctx.rect(320, 90, 60, 20)\nctx.fillStyle = "Blue"\nctx.fill() \n \n', 'tags': '', 'url': 'w16_exam1.html'}, {'title': 'HW 3', 'text': '主題: Python 的數字、演算法與迴圈 (20%) \n Python 課程教材:  https://www.learnpythonwithjupyter.com/  - PART 4 and Part 5 \n 完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 3.html'}, {'title': 'HW 3 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n', 'tags': '', 'url': 'HW 3 Exam.html'}, {'title': 'w16_exam2', 'text': 'exam2 程式連結 \n from browser import html\nfrom browser import document as doc\nimport math\n\n\ndef draw_maze(angle_degrees):\n    # 创建和添加画布\n    canvas = html.CANVAS(width=1200, height=1200)\n    brython_div = doc["brython_div1"]\n    brython_div <= canvas\n\n    # 获取绘图上下文\n    ctx = canvas.getContext("2d")\n\n    # 设置绘图参数\n    pixel_scale = 100\n    offset_x = 32 * 2\n    offset_y = 13 * 2\n    # 整体向右移动的偏移量\n    move_right_offset = 200\n    angle_radians = math.radians(angle_degrees)\n\n    # 定义迷宫线条\n    lines = [\n        ((0, 0), (1, 0)),\n        ((2, 0), (5, 0)),\n        ((5, 0), (5, 5)),\n        ((3, 5), (5, 5)),\n        ((4, 5), (4, 3)),\n        ((2, 3), (4, 3)),\n        ((1, 3), (1, 5)),\n        ((3, 3), (3, 2)),\n        ((0, 0), (0, 5)),\n        ((0, 5), (2, 5)),\n        ((2, 5), (2, 4)),\n        ((2, 4), (3, 4)),\n        ((0, 2), (1, 2)),\n        ((2, 2), (2, 1)),\n        ((0, 1), (4, 1)),\n        ((4, 1), (4, 2)),\n    ]\n\n    # 旋转并绘制迷宫线条\n    ctx.strokeStyle = "blue"\n    ctx.lineWidth = 2\n    for line in lines:\n        start = line[0]\n        end = line[1]\n\n        # 旋转起点坐标\n        start_x_rotated = start[0] * pixel_scale * math.cos(angle_radians) - start[1] * pixel_scale * math.sin(\n            angle_radians)\n        start_y_rotated = start[0] * pixel_scale * math.sin(angle_radians) + start[1] * pixel_scale * math.cos(\n            angle_radians)\n\n        # 旋转终点坐标\n        end_x_rotated = end[0] * pixel_scale * math.cos(angle_radians) - end[1] * pixel_scale * math.sin(\n            angle_radians)\n        end_y_rotated = end[0] * pixel_scale * math.sin(angle_radians) + end[1] * pixel_scale * math.cos(\n            angle_radians)\n\n        ctx.beginPath()\n        ctx.moveTo(\n            offset_x + move_right_offset + start_x_rotated,\n            offset_y + start_y_rotated\n        )\n        ctx.lineTo(\n            offset_x + move_right_offset + end_x_rotated,\n            offset_y + end_y_rotated\n        )\n        ctx.stroke()\n\n    return ctx, offset_x + move_right_offset, offset_y\n\n\ndef label_coordinate(ctx, offset_x, offset_y, text_angle_degrees):\n    text_angle_radians = math.radians(text_angle_degrees)\n    ctx.font = "18px Arial"\n    ctx.fillStyle = "red"\n    # 原始文本位置\n    original_x = offset_x + 10\n    original_y = offset_y - 15\n    # 旋转后的文本位置\n    rotated_x = original_x * math.cos(text_angle_radians) - original_y * math.sin(text_angle_radians)\n    rotated_y = original_x * math.sin(text_angle_radians) + original_y * math.cos(text_angle_radians)\n    ctx.save()\n    ctx.translate(offset_x, offset_y)\n    ctx.rotate(text_angle_radians)\n    ctx.fillText("(32, 13)", 10, - 15)\n    ctx.restore()\n\n\nif __name__ == "__main__":\n    # 调整迷宫角度，这里设置为30度，可以根据需要修改\n    maze_angle = 0\n    # 文本角度\n    text_angle = 0\n    ctx, offset_x, offset_y = draw_maze(maze_angle)\n    label_coordinate(ctx, offset_x, offset_y, text_angle)\n \n \n', 'tags': '', 'url': 'w16_exam2.html'}, {'title': 'W5', 'text': '\n #help(range)\nfor i in range(1, 6, 2):\nprint(i, end="")\nprint()\n\n\n# 設定金字塔的高度\nheight= 30\n\n使用for迴圈列印金字塔\nfor i in range(height):\n# 列印空格\nprint(\' \' * (height - i - 1 + 2), end=\' \')#增加兩個空格\n# 列印星號\nprint(\'*\' * (2 * i + 1)) \n \n \xa0 \n \n', 'tags': '', 'url': 'W5.html'}, {'title': 'help(print)', 'text': '\n \n \n \n \n \n', 'tags': '', 'url': 'help(print).html'}, {'title': '1', 'text': '', 'tags': '', 'url': '1.html'}, {'title': '2', 'text': '', 'tags': '', 'url': '2.html'}, {'title': '3', 'text': '', 'tags': '', 'url': '3.html'}, {'title': '4', 'text': '', 'tags': '', 'url': '4.html'}, {'title': '5', 'text': '', 'tags': '', 'url': '5.html'}, {'title': '6', 'text': '', 'tags': '', 'url': '6.html'}, {'title': '7', 'text': '', 'tags': '', 'url': '7.html'}, {'title': '8', 'text': '', 'tags': '', 'url': '8.html'}, {'title': '9', 'text': '', 'tags': '', 'url': '9.html'}, {'title': '10', 'text': '', 'tags': '', 'url': '10.html'}, {'title': '11', 'text': '', 'tags': '', 'url': '11.html'}, {'title': 'w8', 'text': '今天做的東西 \n 操作步驟: \n \n 下載\xa0 python_2025_lite.7z \xa0(可攜程式環境) \n 下載 \xa0 zmq_remote_api_ex_cube_triangle.7z \xa0(利用 Python 控制模擬場景中的物件) \n 進入可攜程式環境中 data/CoppeliaSim 目錄, 開啟 coppeliaSim.exe (機電整合模擬程式, \xa0 原始碼 ) \n 啟動可攜程式環境, 雙點擊 start_ipv6.bat, 系統會啟動四個命令列, 兩個 SciTE 編輯器 \n 執行場景控制程式前, 先處理操作系統的防火牆, 將下列指令存為 .bat 檔案後, 以管理員身分執行, 以便開啟 23000-23050 埠號進出: \n netsh advfirewall firewall add rule name="allow_23000-23050" dir=in action=allow protocol=TCP localport=23000-23050 netsh advfirewall firewall add rule name="allow_23000-23050" dir=out action=allow protocol=TCP localport=23000-23050 \n 開啟 CoppeliaSim 中的視覺串流伺服器: Modules - Connectivity - Visualization stream \n 利用 SciTE 開啟\xa0put_cubes_into_scene_1.py, 利用 Tools - Go 執行操控程式 \n 使用者可以透過瀏覽器, 以模擬場景所在電腦的 IP, 且埠號為 23020 觀看模擬場景 \n \n 我的程式 \n from coppeliasim_zmqremoteapi_client import RemoteAPIClient import time import keyboard \n # 利用 zmqRemoteAPI 以 23000 對場景伺服器進行連線 client = RemoteAPIClient(\'120.113.99.10\', 23000) # 以 getObject 方法取得場景物件 sim = client.getObject(\'sim\') box = sim.getObject(\'/box\') \n # 啟動模擬 sim.startSimulation() \n # 設定立方體的尺寸和初始位置 cube_size = 0.2 # 20 cm spacing = 0.5 # 50 cm 之間的距離（可根據需求調整） \n # 擺放立方體的行數和每行的數量 rows = 5 # 從第 1 行到第 5 行 cubes_in_row = [1, 3, 5, 7, 9] # 每行立方體的數量 \n # 在正的 Y 方向擺放立方體 for row in range(rows):  # 計算每行的起始 x 位置，讓其對稱  start_row_x = - (cubes_in_row[row] - 1) * spacing / 2    for col in range(cubes_in_row[row]):  # 計算每個立方體的位置  x_position = start_row_x + col * spacing  y_position = row * spacing # 垂直方向上每行間距    # 建立立方體  cube_handle = sim.createPrimitiveShape(sim.primitiveshape_cuboid, [cube_size, cube_size, cube_size], 0)  sim.setObjectPosition(cube_handle, -1, [x_position, y_position, cube_size / 2]) # z 方向上升到立方體的中心 \n # 在負的 Y 方向擺放立方體 for row in range(rows):  # 計算每行的起始 x 位置，讓其對稱  start_row_x = - (cubes_in_row[row] - 1) * spacing / 2    for col in range(cubes_in_row[row]):  # 計算每個立方體的位置  x_position = start_row_x + col * spacing  y_position = -row * spacing # 負的 Y 方向    # 建立立方體  cube_handle = sim.createPrimitiveShape(sim.primitiveshape_cuboid, [cube_size, cube_size, cube_size], 0)  sim.setObjectPosition(cube_handle, -1, [x_position, y_position, cube_size / 2]) # z 方向上升到立方體的中心 \n # 完成立方體的擺放 print("立方體已成功擺放!") \n # 設定主迴圈 while True:  # 在這裡可以進行其他模擬操作  time.sleep(0.1) # 確保循環不會過快 \n if keyboard.is_pressed(\'q\'):  # 可以按下 q 鍵跳出重複執行迴圈  break \n 終止模擬 sim.stopSimulation() \n \n \n', 'tags': '', 'url': 'w8.html'}, {'title': 'HW 4', 'text': '主題: 利用 Python 控制機電模擬系統 (20%) \n 利用\xa0 https://solvespace.com/ \xa0建立機械系統零組件 \n 利用  CoppeliaSim  建立機電模擬系統 \n 利用  Python  跨網路控制瀏覽器上的機電模擬系統 \n 範例: \n cd2023_pj3ag4_zmq_football_4.7.7z \n cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z \n 完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中. \n', 'tags': '', 'url': 'HW 4.html'}, {'title': 'HW 4 Exam', 'text': '每六人為一組進行協同程式練習 \n 透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯. \n <h1>Brython</h1> <p>從 1 累加到 100:</p> <p><button id="add1to100">1 add to 100</button></p> <!-- 導入 brython 程式庫 --> <p> <script src="./../cmsimde/static/brython.js"></script> <script src="./../cmsimde/static/brython_stdlib.js"></script> </p> <!-- 啟動 Brython --> <p> <script>// <![CDATA[ window.onload=function(){ brython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']}); } // ]]></script> </p> <p><!-- 導入 FileSaver 與 filereader --></p> <p> <script type="text/javascript" src="./../cmsimde/static/ace/FileSaver.min.js"></script> <script type="text/javascript" src="./../cmsimde/static/ace/filereader.js"></script> </p> <p><!-- 導入 ace --></p> <p> <script type="text/javascript" src="./../cmsimde/static/ace/ace.js"></script> <script type="text/javascript" src="./../cmsimde/static/ace/ext-language_tools.js"></script> <script type="text/javascript" src="./../cmsimde/static/ace/mode-python3.js"></script> <script type="text/javascript" src="./../cmsimde/static/ace/snippets/python.js"></script> </p> <p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 --> <script src="./../cmsimde/static/Cango-24v03-min.js"></script> <script src="./../cmsimde/static/gearUtils-09.js"></script> <script src="./../cmsimde/static/SVGpathUtils-6v03-min.js"></script> <script src="./../cmsimde/static/sylvester.js"></script> <script src="./../cmsimde/static/PrairieDraw.js"></script> </p> <p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p> <p> <script type="text/javascript">// <![CDATA[ function doSave(storage_id, filename){ var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"}); filename = document.getElementById(filename).value saveAs(blob, filename+".py"); } // ]]></script> </p> <p> <script type="text/python3">// <![CDATA[ from browser import document as doc import ace # 清除畫布 def clear_bd1(ev): bd = doc["brython_div1"] bd.clear() Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" ) # 從 gist 取出程式碼後, 放入 editor 作為 default 程式 def run1(): # 利用 get 取下 src 變數值 try: url = doc.query["src"] except: url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py" prog = open(url).read() # 將程式載入編輯區 Ace1.editor.setValue(prog) Ace1.editor.scrollToRow(0) Ace1.editor.gotoLine(0) # 直接執行程式 #ns = {\'__name__\':\'__main__\'} #exec(prog, ns) # 按下 run 按鈕 Ace1.run() # 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定 doc[\'kw_run1\'].bind(\'click\', Ace1.run) doc[\'kw_show_console1\'].bind(\'click\', Ace1.show_console) doc[\'kw_clear_console1\'].bind(\'click\', Ace1.clear_console) doc[\'clear_bd1\'].bind(\'click\', clear_bd1) # 呼叫函式執行 run1() // ]]></script> </p> <p><!-- add 1 to 100 開始 --> <script type="text/python3">// <![CDATA[ from browser import document as doc import ace # 清除畫布 def clear_bd1(ev): bd = doc["brython_div1"] bd.clear() # 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件 Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" ) add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py" # 從 gist 取得程式碼 add_src = open(add1to100_url).read() def add(ev): Ace2.editor.setValue(add_src) Ace2.editor.scrollToRow(0) Ace2.editor.gotoLine(0) Ace2.run() # id 為 "add1to100" 的按鈕點按時, 執行 add 方法 doc["add1to100"].bind(\'click\', add) // ]]></script> </p> <p><!-- add 1 to 100 結束--></p> <!-- editor1 開始 --> <p><!-- 用來顯示程式碼的 editor 區域 --></p> <div id="kw_editor1" style="width: 600px; height: 300px;"></div> <p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p> <p><!-- 存擋表單開始 --></p> <form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text">.py</label> <input onclick="doSave(\'kw_py_src1\', \'kw_filename1\');" type="submit" value="Save"></form> <p><!-- 存擋表單結束 --></p> <p></p> <p><!-- 執行與清除按鈕開始 --></p> <p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p> <p><!-- 執行與清除按鈕結束 --></p> <p></p> <p><!-- 程式執行 ouput 區 --></p> <div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div> <p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p> <div id="brython_div1"></div> <!-- editor1 結束 --><hr><!-- ########################################## --> <p>從 1 累加到 100 part2:</p> <p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p> <p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p> <p> <script type="text/python3">// <![CDATA[ from browser import document as doc import ace # 清除畫布 def clear_bd2(ev): bd = doc["brython_div2"] bd.clear() Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" ) # 從 gist 取出程式碼後, 放入 editor 作為 default 程式 def run2(): # 利用 get 取下 src 變數值 try: url = doc.query["src2"] except: url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py" prog = open(url).read() # 將程式載入編輯區 Ace3.editor.setValue(prog) Ace3.editor.scrollToRow(0) Ace3.editor.gotoLine(0) # 直接執行程式 #ns = {\'__name__\':\'__main__\'} #exec(prog, ns) # 按下 run 按鈕 Ace3.run() # 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定 doc[\'kw_run2\'].bind(\'click\', Ace3.run) doc[\'kw_show_console2\'].bind(\'click\', Ace3.show_console) doc[\'kw_clear_console2\'].bind(\'click\', Ace3.clear_console) doc[\'clear_bd2\'].bind(\'click\', clear_bd2) # 呼叫函式執行 run2() // ]]></script> </p> <p><!-- add 1 to 100 part2 開始 --> <script type="text/python3">// <![CDATA[ from browser import document as doc import ace # 清除畫布 def clear_bd2(ev): bd = doc["brython_div2"] bd.clear() # 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件 Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" ) # 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區 class button2: def __init__(self, url): self.url = url # 記得加入 event 輸入變數 def do(self,ev): Ace4.editor.setValue(open(self.url).read()) Ace4.editor.scrollToRow(0) Ace4.editor.gotoLine(0) Ace4.run() add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py" # 從 gist 取得程式碼 add_src = open(add1to100_url).read() def add2(ev): Ace4.editor.setValue(add_src) Ace4.editor.scrollToRow(0) Ace4.editor.gotoLine(0) Ace4.run() # id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法 doc["add1to100part2"].bind(\'click\', add2) # 以下為運用 button2 class 的通用 gist 程式導入區 ################################## cango_three_gears start cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py" cango_three_gears = button2(cango_three_gears_url) doc["cango_three_gears"].bind("click", cango_three_gears.do) ################################## cango_three_gears end ################################## bsnake start bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py" bsnake = button2(bsnake_url) doc["bsnake"].bind("click", bsnake.do) ################################## bsnake end ################################## aitetris start aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py" aitetris = button2(aitetris_url) doc["aitetris"].bind("click", aitetris.do) ################################## aitetris end ################################## threejsblock start threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py" threejsblock = button2(threejsblock_url) doc["threejsblock"].bind("click", threejsblock.do) ################################## threejsblock end // ]]></script> </p> <p><!-- add 1 to 100 part2 結束--></p> <!-- editor2 開始 --> <p><!-- 用來顯示程式碼的 editor 區域 --></p> <div id="kw_editor2" style="width: 600px; height: 300px;"></div> <p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p> <p><!-- 存擋表單開始 --></p> <form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text">.py</label> <input onclick="doSave(\'kw_py_src2\', \'kw_filename2\');" type="submit" value="Save"></form> <p><!-- 存擋表單結束 --></p> <p></p> <p><!-- 執行與清除按鈕開始 --></p> <p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p> <p><!-- 執行與清除按鈕結束 --></p> <p></p> <p><!-- 程式執行 ouput 區 --></p> <div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div> <p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p> <div id="brython_div2"></div> <!-- editor2 結束 --><hr> <p> <script type="text/javascript" src="https://unpkg.com/three@0.144.0/build/three.js"></script> </p>', 'tags': '', 'url': 'HW 4 Exam.html'}, {'title': 'w16_exam3', 'text': 'exam3 \n from browser import html\nfrom browser import document as doc\nimport math\n \n \ndef draw_maze(angle_degrees):\n    # 创建和添加画布\n    canvas = html.CANVAS(width=1200, height=1200)\n    brython_div = doc["brython_div1"]\n    brython_div <= canvas\n \n    # 获取绘图上下文\n    ctx = canvas.getContext("2d")\n \n    # 设置绘图参数\n    pixel_scale = 100\n    offset_x = 32 * 2\n    offset_y = 13 * 2\n    # 整体向右移动的偏移量\n    move_right_offset = 200\n    angle_radians = math.radians(angle_degrees)\n \n    # 定义迷宫线条\n    lines = [\n        ((0, 0), (1, 0)),\n        ((2, 0), (5, 0)),\n        ((5, 0), (5, 5)),\n        ((3, 5), (5, 5)),\n        ((4, 5), (4, 3)),\n        ((2, 3), (4, 3)),\n        ((1, 3), (1, 5)),\n        ((3, 3), (3, 2)),\n        ((0, 0), (0, 5)),\n        ((0, 5), (2, 5)),\n        ((2, 5), (2, 4)),\n        ((2, 4), (3, 4)),\n        ((0, 2), (1, 2)),\n        ((2, 2), (2, 1)),\n        ((0, 1), (4, 1)),\n        ((4, 1), (4, 2)),\n    ]\n \n    # 旋转并绘制迷宫线条\n    ctx.strokeStyle = "blue"\n    ctx.lineWidth = 2\n    for line in lines:\n        start = line[0]\n        end = line[1]\n \n        # 旋转起点坐标\n        start_x_rotated = start[0] * pixel_scale * math.cos(angle_radians) - start[1] * pixel_scale * math.sin(\n            angle_radians)\n        start_y_rotated = start[0] * pixel_scale * math.sin(angle_radians) + start[1] * pixel_scale * math.cos(\n            angle_radians)\n \n        # 旋转终点坐标\n        end_x_rotated = end[0] * pixel_scale * math.cos(angle_radians) - end[1] * pixel_scale * math.sin(\n            angle_radians)\n        end_y_rotated = end[0] * pixel_scale * math.sin(angle_radians) + end[1] * pixel_scale * math.cos(\n            angle_radians)\n \n        ctx.beginPath()\n        ctx.moveTo(\n            offset_x + move_right_offset + start_x_rotated,\n            offset_y + start_y_rotated\n        )\n        ctx.lineTo(\n            offset_x + move_right_offset + end_x_rotated,\n            offset_y + end_y_rotated\n        )\n        ctx.stroke()\n \n    return ctx, offset_x + move_right_offset, offset_y, pixel_scale\n \n \ndef find_path():\n    # 简单的路径示例，这里假设的路径，实际需要更复杂的算法\n    # 为了维持原本迷宫路线，这里路径假设不破坏迷宫已有路线\n    path = [\n        ((1.5, 0), (1.5, 0.5)),\n        ((1.5, 0.5), (4.5, 0.5)),\n        ((4.5, 0.5), (4.5, 2.5)),\n        ((4.5, 2.5), (3.5, 2.5)),\n        ((3.5, 2.5), (3.5, 1.5)),\n        ((3.5, 1.5), (2.5, 1.5)),\n        ((2.5, 1.5), (2.5, 2.5)),\n        ((2.5, 2.5), (1.5, 2.5)),\n        ((1.5, 2.5), (1.5, 3.5)),\n        ((1.5, 3.5), (3.5, 3.5)),\n        ((3.5, 3.5), (3.5, 4.5)),\n        ((3.5, 4.5), (2.5, 4.5)),\n        ((2.5, 4.5), (2.5, 5))\n    ]\n    return path\n \n \ndef draw_path(ctx, offset_x, offset_y, angle_degrees, path, pixel_scale):\n    angle_radians = math.radians(angle_degrees)\n    ctx.strokeStyle = "red"\n    ctx.lineWidth = 2\n    for line in path:\n        start = line[0]\n        end = line[1]\n \n        # 旋转起点坐标\n        start_x_rotated = start[0] * pixel_scale * math.cos(angle_radians) - start[1] * pixel_scale * math.sin(\n            angle_radians)\n        start_y_rotated = start[0] * pixel_scale * math.sin(angle_radians) + start[1] * pixel_scale * math.cos(\n            angle_radians)\n \n        # 旋转终点坐标\n        end_x_rotated = end[0] * pixel_scale * math.cos(angle_radians) - end[1] * pixel_scale * math.sin(\n            angle_radians)\n        end_y_rotated = end[0] * pixel_scale * math.sin(angle_radians) + end[1] * pixel_scale * math.cos(\n            angle_radians)\n \n        ctx.beginPath()\n        ctx.moveTo(\n            offset_x + start_x_rotated,\n            offset_y + start_y_rotated\n        )\n        ctx.lineTo(\n            offset_x + end_x_rotated,\n            offset_y + end_y_rotated\n        )\n        ctx.stroke()\n \n \ndef label_coordinate(ctx, offset_x, offset_y, text_angle_degrees):\n    text_angle_radians = math.radians(text_angle_degrees)\n    ctx.font = "18px Arial"\n    ctx.fillStyle = "red"\n    # 原始文本位置\n    original_x = offset_x + 10\n    original_y = offset_y - 15\n    # 旋转后的文本位置\n    rotated_x = original_x * math.cos(text_angle_radians) - original_y * math.sin(text_angle_radians)\n    rotated_y = original_x * math.sin(text_angle_radians) + original_y * math.cos(text_angle_radians)\n    ctx.save()\n    ctx.translate(offset_x, offset_y)\n    ctx.rotate(text_angle_radians)\n    ctx.fillText("(32, 13)", 10, - 15)\n    ctx.restore()\n \n \nif __name__ == "__main__":\n    # 调整迷宫角度，这里设置为30度，可以根据需要修改\n    maze_angle = 0\n    # 文本角度\n    text_angle = 0\n    ctx, offset_x, offset_y, pixel_scale = draw_maze(maze_angle)\n    path = find_path()\n    draw_path(ctx, offset_x, offset_y, maze_angle, path, pixel_scale)\n    label_coordinate(ctx, offset_x, offset_y, text_angle) \n \n', 'tags': '', 'url': 'w16_exam3.html'}, {'title': 'Final Report', 'text': '期末口頭與書面專題報告 (20%) \n 期末口頭專題報告影片: \n ...... \n 期末書面專題報告檔案 (pdf): \n ...... \n 電腦輔助設計與實習課程總結心得: \n ...... \n 期末報告自評成績: \n 完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中.', 'tags': '', 'url': 'Final Report.html'}, {'title': 'Brython', 'text': '從 1 累加到 100: \n 1 add to 100 \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};