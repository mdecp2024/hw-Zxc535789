<h1>關於</h1>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">國立虎尾科技大學機械設計工程系</span></span></p>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">國立台灣大學</span></span></p>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">機械設計工程系</span></span></p>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">cp2024 電腦程式</span></span></p>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">課程教材：</span></span></p>
<p style="padding-left: 30px;"><a href="https://blog.jupyter.org/introducing-learn-python-with-jupyter-11214f152159"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">使用 Jupyter 學習 Python</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">（</span></span><a href="https://www.learnpythonwithjupyter.com/"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">網站</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">、</span></span><a href="https://localhost:9445/downloads/learn_python_with_jupyter.pdf"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">電子書</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">）</span></span></p>
<p style="padding-left: 30px;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">教育版帳號 microsoftonline 登錄點:  </span></span><a href="https://login.microsoftonline.com/"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">https://login.microsoftonline.com/</span></span></a></p>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">團隊線上教學：</span></span></p>
<p style="padding-left: 30px;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">以「學號@nfu.edu.tw」登入</span></span><a href="https://login.microsoftonline.com/"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">https://login.microsoftonline.com/</span></span></a><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"> Office 365</span></span></p>
<p style="padding-left: 30px;"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">Teams 團隊代碼：  </span></span><span class="fui-Text ___vec8h90 fk6fouc f1pbo8a8 f1i3iumi figsok6 fpgzoln f1w7gpdv f6juhto f1mtd64y f1y7q3j9 f2jf649 foxqkq2" data-tid="join-team-code"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">fqpabi8</span></span></span></p>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">個人倉儲： <a href="https://github.com/mdecp2024/hw-Zxc535789">https://github.com/mdecp2024/hw-Zxc535789</a></span></span></p>
<p>個人網站： <a href="https://mdecp2024.github.io/hw-Zxc535789/">https://mdecp2024.github.io/hw-Zxc535789/</a></p>
<p><span style="vertical-align: inherit;"><span style="vertical-align: inherit;"></span></span><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">其他資訊：</span></span></p>
<p style="padding-left: 30px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">cd2023_pj3ag4_zmq_football_4.7.7z</span></span></a></p>
<p style="padding-left: 30px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</span></span></a></p>
<h1>Attendance</h1>
<p>出席 (10%) - 自行舉證評分</p>
<p>自行利用 Github commits 提交記錄評分.</p>
<h1>HW 1</h1>
<h4>主題: 基於瀏覽器的分散式版次管理與整合程式開發環境 (10%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">USB 隨身碟:</p>
<p style="padding-left: 60px;">下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (428 MB, 解開壓縮後約 1.5 GB)</p>
<p style="padding-left: 30px;"><a href="https://mde.tw/cp2024/content/Jupyter.html">Jupyter</a></p>
<p style="padding-left: 30px;">What are Github and Codespaces?</p>
<p style="padding-left: 60px;"><a href="https://docs.github.com/en/get-started/start-your-journey/hello-world">Hello World - GitHub Docs</a></p>
<p style="padding-left: 30px;">利用包含學號的字串作為帳號, 申請免費使用 Github.</p>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 1</p>
<hr/>
<p>PART 1: Creating the basics 資料整理 (10%)</p>
<p>啟動可攜程式系統後, 在命令列中:</p>
<p>y:\&gt;cd notebook</p>
<p>y:\notebook&gt;jupyter lab --collaborative</p>
<p>進入 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a> 練習如何修改 PART1 notebook 後存檔, 上傳至作業倉儲中的 downloads 目錄後, 透過 <a href="https://nbviewer.org/">https://nbviewer.org/</a> 將已經提交的 <a href="/downloads/01_string_input_print.ipynb">01_string_input_print.ipynb</a>, 嵌入下列網頁中.</p>
<p><iframe height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb" width="600"></iframe></p>
<p>上列 iframe 標註的 html 語法:</p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">&lt;iframe width="600" height="400" src="https://nbviewer.org/urls/mde.tw/cp2024_hw/downloads/01_string_input_print.ipynb"&gt;&lt;/iframe&gt;</pre>
<p>完成上述流程整理後, 請將 HW1 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 1 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 Topic 1 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w7</h3>
<p></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/oL1F4DTb-8k?si=5IUBLpK3KmvnfK-e" title="YouTube video player" width="560"></iframe></p>
<p></p>
<h3>w10</h3>
<p>題目一</p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/3HeyTnKjcaI?si=pj5zmz1BeU6l6JbW" title="YouTube video player" width="560"></iframe></p>
<p>題目二</p>
<p></p>
<p></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/Gzn7i7ARZF0?si=JNdj90Js5dL0xm5w" title="YouTube video player" width="560"></iframe></p>
<h3>w11_hw</h3>
<p>1.  已知可以用 Python 程式<a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5e6eda7a004c15fa7262b9a80bfa4af6/raw/c2225ac22f32ee8485a630b42cf3f4d8567bb661/up_to_down_pyramid.py">由上往下列印三角形 *</a>, 或<a href="https://mde.tw/cp2024/content/Brython.html?src=https://gist.githubusercontent.com/mdecycu/5e6eda7a004c15fa7262b9a80bfa4af6/raw/56793c72d4495d564e3cc6214ed5fb68dbd2b21d/left_to_right_pyramid.py">由左往右列印三角形 *</a>, 請將此程式延伸到可以在 10x10 的字元區域中, 以 "*" 字元列印出圓型區域. 完成後請將程式碼存入個人 Gist 後, 直接在個人作業網站中的 Brython 頁面中執行. (提示: ?src=gist_script_URL)</p>
<p>第一題<span> </span><a href="https://mdecp2024.github.io/hw-Zxc535789/content/Brython.html?src=https://gist.githubusercontent.com/Zxc535789/d6bba4afc0746a27de0e75fd6e8a6ed6/raw/85c2a925f78fed13598c808bb595a86d5b359e17/abc.py">字號圖形</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">import math

def print_circle(radius, center_x, center_y, grid_size):
    # 遍歷每個位置
    for y in range(grid_size):
        for x in range(grid_size):
            # 計算當前位置到圓心的距離
            distance = math.sqrt((x - center_x)**2 + (y - center_y)**2)
            # 判斷這個位置是否在圓的範圍內
            if abs(distance - radius) &lt; 0.5:  # 這個值可以調整精度
                print("*", end="")
            else:
                print(" ", end="")
        print()  # 換行

# 設定圓的參數
radius = 4
center_x = 5  # 圓心 X 座標
center_y = 5  # 圓心 Y 座標
grid_size = 10  # 網格大小 (10x10)

# 打印圓形
print_circle(radius, center_x, center_y, grid_size)
</pre>
<p>2. 已知可以在網頁中利用 Brython 繪製方格與塗色, 如下連結, 請設法修改此一程式, 直接將程式存入個人的 Gist, 並利用黑色方塊圍出一個圓形區域.</p>
<p></p>
<p>第二題 <a href="https://mdecp2024.github.io/hw-Zxc535789/content/Brython.html?src=https://gist.githubusercontent.com/Zxc535789/d6bba4afc0746a27de0e75fd6e8a6ed6/raw/5a9af118f6e9b71b7a1b1a7d52cb66e604f00799/abc1.py">網頁上的方格與塗色</a></p>
<p>3. 完成上列題目後, 請利用 Youtube 影片<span>簡報</span>個人的解題過程與心得.</p>
<p></p>
<p><br/><span>w11</span><a href="https://mdecp2024.github.io/hw-Zxc535789/content/Brython.html?src=https://gist.githubusercontent.com/Zxc535789/d6bba4afc0746a27de0e75fd6e8a6ed6/raw/85c2a925f78fed13598c808bb595a86d5b359e17/123.py">數列練習</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc
 
# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=400, height=400)
brython_div = doc["brython_div1"]
brython_div &lt;= canvas
 
#每一個的pixcel數
gs = 20
 
#gs"tc = canvas width and height
 
ctx = canvas.getContext("2d")
width = 11
height = 11
 
 
for i in range(width):
     for j in range(height):
         #dRect(i*gs,j*gs,gs,gs,1,"lightgray"
          ctx.lineWidth = 1
          ctx.strokeStyle = 'lightgray'
          ctx.beginPath();
          ctx.rect(i*gs,j*gs,gs,gs)
          ctx.stroke();</pre>
<p></p>
<h3>w12</h3>
<p>第一題:Text, questions, and art (文字、問題和藝術)</p>
<p>說明:<span>input為輸入()中為問題,使用者輸入之答案會變成返回的值</span></p>
<p><span>input()程式範例:</span></p>
<p><a href="https://mdecp2024.github.io/hw-Zxc535789/content/Brython.html?src=https://gist.githubusercontent.com/Zxc535789/d6bba4afc0746a27de0e75fd6e8a6ed6/raw/66da8beb60b881ee0585fcd31e884b61e0abd143/w12%2520%2520Q1">What's your name?</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">name = input("What's your name? ")  # 提示使用者輸入名字
print(f"My name is , {name}!")            # 使用 f-string 輸出打招呼的訊息
input("What's your name?")</pre>
<p><span>print()程式範例: <a href="https://mdecp2024.github.io/hw-Zxc535789/content/Brython.html?src=https://gist.githubusercontent.com/Zxc535789/d6bba4afc0746a27de0e75fd6e8a6ed6/raw/017b9178e4feab1d6ff39aee691ae456d0a12b61/w12%2520%25E8%25B2%2593">貓</a></span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">print ("   /\_/\   ")
print (" &gt;^.^&lt;   ")
print ("    / \    ")
print ("   (___)___")</pre>
<p>第二題:<em>變數</em></p>
<p>說明:Variables and string concatenation(變數和字串連接)</p>
<p>範例：<a href="https://mdecp2024.github.io/hw-Zxc535789/content/Brython.html?src=https://gist.githubusercontent.com/Zxc535789/d6bba4afc0746a27de0e75fd6e8a6ed6/raw/0849aebd056406f4ba7f072788db2b7d16d7f70e/w12%2520name">name</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">first_name = "yu" #變數first_name為"自己的姓"
last_name  = "chang" #變數last_name為"自己的名"
print (first_name) #列印變數first_name
print (last_name) #列印變數last_name</pre>
<p><span>範例程式: <a href="https://mdecp2024.github.io/hw-Zxc535789/content/Brython.html?src=https://gist.githubusercontent.com/Zxc535789/d6bba4afc0746a27de0e75fd6e8a6ed6/raw/6c482ff098a921a19432315eaee0dda2ae8702ac/w12%2520name+favorite%2520food">name+favorite food</a></span></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">name = input("What's your name?") #變數name為input所輸入之文字
favorite_food = input ("What is your favorite food?") #變數favorite_food為input所輸入之文字
print ("Hi! My name is " + name) #列印"Hi! My name is "(這段為文字) + name(name這個變數的數值)
print ("My favorite food is " + favorite_food)  #列印"My favorite food is "(這段為文字) + favorite_food(favorite_food這個變數的數值)
print (name + "'s favorite food is " + favorite_food) #列印name (數值)+ 's favorite food is (此段為文字)+favorite_food(數值)</pre>
<p></p><h3>w13_hw</h3>
<p><a href="https://mdecp2024.github.io/hw-Zxc535789/content/Brython.html?src=https://gist.githubusercontent.com/Zxc535789/d6bba4afc0746a27de0e75fd6e8a6ed6/raw/db3b39ad71234002b22fa8e074db51aa282889a5/%25E5%2585%25A9%25E5%2580%258B%25E6%25AD%25A3%25E6%2596%25B9%25E5%25BD%25A2%25E7%25B4%2585%25E8%2589%25B2%25E6%25A1%2586"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">兩個紅色支架框</span></span></a></p>
<p><a href="https://mdecp2024.github.io/hw-Zxc535789/content/Brython.html?src=https://gist.githubusercontent.com/Zxc535789/d6bba4afc0746a27de0e75fd6e8a6ed6/raw/3437d9d79862daa1510da99994b2b4a186cbaba5/%25E5%2585%25A9%25E5%2580%258B%25E6%2596%25B9%25E5%25BD%25A2%25E5%258A%25A0%25E4%25B8%2580%25E8%2597%258D%25E7%25B7%259A"><span style="vertical-align: inherit;"><span style="vertical-align: inherit;">兩個方形加藍線</span></span></a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc

# 利用 html 建立 canvas 超文件物件
canvas = html.CANVAS(width=400, height=400)
brython_div = doc["brython_div1"]
brython_div &lt;= canvas

ctx = canvas.getContext("2d")
ctx.lineWidth = 1

# 繪製兩個矩形
ctx.strokeStyle = 'red'  # 設定矩形顏色為紅色
ctx.beginPath() 
ctx.rect(10, 10, 200, 200)
ctx.rect(110, 110, 200, 200)
ctx.stroke()

# 繪製對角線，顏色設定為藍色
ctx.strokeStyle = 'blue'  # 設定對角線顏色為藍色
ctx.beginPath() 
ctx.moveTo(10, 10)
ctx.lineTo(210, 210)
ctx.stroke()</pre>
<p><a href="https://mdecp2024.github.io/hw-Zxc535789/content/Brython.html?src=https://gist.githubusercontent.com/Zxc535789/d6bba4afc0746a27de0e75fd6e8a6ed6/raw/b7d3144bc947394cf107f89b6d0de5811cb81cce/W13%2520%25E4%25BD%259C%25E6%25A5%25AD">w13 作業</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc

# 建立 canvas 元素
canvas = html.CANVAS(width=500, height=500)
brython_div = doc["brython_div1"]
brython_div &lt;= canvas

# 定義圓心和半徑
x1, y1 = 200, 200  # 第一個圓的圓心
x2, y2 = 300, 300  # 第二個圓的圓心
radius = 141.4  # 圓的半徑

ctx = canvas.getContext("2d")

# === 繪製第一個圓 ===
ctx.beginPath()
ctx.arc(x1, y1, radius, 0, 2 * 3.14159)
ctx.fillStyle = "lightgreen"  # 更改為淺綠色
ctx.fill()

# === 繪製重疊區域 (黑色交集區塊) ===
ctx.save()  # 保存繪圖狀態
ctx.beginPath()
ctx.arc(x1, y1, radius, 0, 2 * 3.14159)
ctx.clip()  # 限制繪圖範圍為第一個圓

ctx.beginPath()
ctx.arc(x2, y2, radius, 0, 2 * 3.14159)
ctx.fillStyle = "darkblue"  # 更改為深藍色
ctx.fill()
ctx.restore()  # 恢復繪圖狀態

# === 填充第一個圓其他區域 ===
# 填充左半部分 (橙色)
ctx.beginPath()
ctx.moveTo(x1, y1)
ctx.arc(x1, y1, radius, 3.14159, 3.14159 * 1.5, False)
ctx.closePath()
ctx.fillStyle = "orange"  # 更改為橙色
ctx.fill()

# 填充上半部分 (青色)
ctx.beginPath()
ctx.moveTo(x1, y1)
ctx.arc(x1, y1, radius, 3.14159 * 1.5, 0, False)
ctx.closePath()
ctx.fillStyle = "cyan"  # 更改為青色
ctx.fill()

# 填充左下部分 (黃色)
ctx.beginPath()
ctx.moveTo(x1, y1)
ctx.arc(x1, y1, radius, 3.14159 * 0.5, 3.14159, False)
ctx.closePath()
ctx.fillStyle = "yellow"  # 更改為黃色
ctx.fill()

# === 填充第二個圓區域 ===

# 填充右上部分 (淺珊瑚色)
ctx.beginPath()
ctx.moveTo(x2, y2)
ctx.arc(x2, y2, radius, 3.14159 * 1.5, 0, False)
ctx.closePath()
ctx.fillStyle = "lightcoral"  # 更改為淺珊瑚色
ctx.fill()

# 填充右下部分 (淺灰色)
ctx.beginPath()
ctx.moveTo(x2, y2)
ctx.arc(x2, y2, radius, 0, 3.14159 * 0.5, False)
ctx.closePath()
ctx.fillStyle = "lightgray"  # 更改為淺灰色
ctx.fill()

# 填充下半部分 (萊姆綠色)
ctx.beginPath()
ctx.moveTo(x2, y2)
ctx.arc(x2, y2, radius, 3.14159 * 0.5, 3.14159, False)
ctx.closePath()
ctx.fillStyle = "limegreen"  # 更改為萊姆綠色
ctx.fill()

# === 繪製輔助框架與對角線 ===
# 繪製兩個圓的邊框
ctx.lineWidth = 2
ctx.strokeStyle = "black"
ctx.beginPath()
ctx.arc(x1, y1, radius, 0, 2 * 3.14159)
ctx.stroke()

ctx.beginPath()
ctx.arc(x2, y2, radius, 0, 2 * 3.14159)
ctx.stroke()

# 繪製正方形框架
ctx.lineWidth = 2
ctx.strokeStyle = "red"

# 第一個正方形（紫羅蘭色）
ctx.beginPath()
ctx.rect(100, 100, 200, 200)
ctx.stroke()
ctx.fillStyle = "violet"  # 填充為紫羅蘭色
ctx.fill()

# 第二個正方形（橙色）
ctx.beginPath()
ctx.rect(200, 200, 200, 200)
ctx.stroke()
ctx.fillStyle = "orange"  # 填充為橙色
ctx.fill()

# 繪製對角線（藍色）
ctx.lineWidth = 2
ctx.strokeStyle = "blue"  # 更改為藍色
ctx.beginPath()
ctx.moveTo(100, 100)
ctx.lineTo(300, 300)
ctx.stroke()
</pre>
<p></p>
<h3>w14_hw</h3>
<p><a href="https://mdecp2024.github.io/hw-Zxc535789/content/Brython.html?src=https://gist.githubusercontent.com/Zxc535789/d6bba4afc0746a27de0e75fd6e8a6ed6/raw/8ca4814d9acb47f0233a1124409e562fa675acb1/%25E4%25B8%2589%25E5%2580%258B%25E5%259C%2593">三個交錯圓</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc
import random

# 定義一個函式來初始化畫布
def initialize_canvas(canvas_width=400, canvas_height=400, id="brython_div1"):
    # 創建 canvas 並設置寬度與高度
    canvas = html.CANVAS(width=canvas_width, height=canvas_height)
    brython_div = doc[id]
    brython_div &lt;= canvas
    
    # 獲取 canvas 的 2D 上下文
    ctx = canvas.getContext("2d")
    
    return canvas, ctx

# 定義一個隨機顏色生成函式
def random_color_generator():
    r = random.randint(0, 255)
    g = random.randint(0, 255)
    b = random.randint(0, 255)
    return f"rgb({r}, {g}, {b})"

# 判斷點 (px, py) 是否在圓內
def is_point_in_circle(px, py, cx, cy, r):
    return (px - cx) ** 2 + (py - cy) ** 2 &lt;= r ** 2

# 使用者設定的圓心座標和半徑，並進行掃描線填充
def draw_circles(x1, y1, r1, x2, y2, r2, x3, y3, r3):
    # 初始化畫布
    canvas, ctx = initialize_canvas(400, 400)
    
    # 清除畫布
    ctx.clearRect(0, 0, canvas.width, canvas.height)
    
    # 顏色區域存儲
    color_dict = {}

    # 使用掃描線方法填充區域
    for py in range(0, canvas.height):
        # 逐行掃描，判斷每個點是否在圓內
        current_color = None  # 當前掃描線區域的顏色
        for px in range(0, canvas.width):
            in_circle1 = is_point_in_circle(px, py, x1, y1, r1)
            in_circle2 = is_point_in_circle(px, py, x2, y2, r2)
            in_circle3 = is_point_in_circle(px, py, x3, y3, r3)
            
            if in_circle1 and in_circle2 and in_circle3:
                # 所有圓的交集
                if "intersection_all" not in color_dict:
                    color_dict["intersection_all"] = random_color_generator()
                current_color = color_dict["intersection_all"]
            elif in_circle1 and in_circle2:
                # 圓1與圓2的交集
                if "intersection_1_2" not in color_dict:
                    color_dict["intersection_1_2"] = random_color_generator()
                current_color = color_dict["intersection_1_2"]
            elif in_circle2 and in_circle3:
                # 圓2與圓3的交集
                if "intersection_2_3" not in color_dict:
                    color_dict["intersection_2_3"] = random_color_generator()
                current_color = color_dict["intersection_2_3"]
            elif in_circle1 and in_circle3:
                # 圓1與圓3的交集
                if "intersection_1_3" not in color_dict:
                    color_dict["intersection_1_3"] = random_color_generator()
                current_color = color_dict["intersection_1_3"]
            elif in_circle1:
                # 只在圓1內
                if "circle1" not in color_dict:
                    color_dict["circle1"] = random_color_generator()
                current_color = color_dict["circle1"]
            elif in_circle2:
                # 只在圓2內
                if "circle2" not in color_dict:
                    color_dict["circle2"] = random_color_generator()
                current_color = color_dict["circle2"]
            elif in_circle3:
                # 只在圓3內
                if "circle3" not in color_dict:
                    color_dict["circle3"] = random_color_generator()
                current_color = color_dict["circle3"]
            else:
                # 點不在三個圓內，畫外區域
                current_color = "white"  # 背景色白色

            # 填充顏色
            ctx.fillStyle = current_color
            ctx.fillRect(px, py, 1, 1)  # 填充一個像素

# 直接設定三個圓的圓心和半徑
x1, y1, r1 = 150, 200, 100  # 圓1：圓心 (150, 200)，半徑 100
x2, y2, r2 = 250, 200, 100  # 圓2：圓心 (250, 200)，半徑 100
x3, y3, r3 = 200, 150, 100  # 圓3：圓心 (200, 150)，半徑 100

# 呼叫畫圓函式
draw_circles(x1, y1, r1, x2, y2, r2, x3, y3, r3)</pre>
<p></p>
<h3>w15</h3>
<p><a href="https://mdecp2024.github.io/hw-Zxc535789/content/Brython.html?src=https://gist.githubusercontent.com/Zxc535789/d6bba4afc0746a27de0e75fd6e8a6ed6/raw/2ed9003f4ce4973d942ec226fb9d9722566e7795/w15%25E4%25BD%259C%25E6%25A5%25AD">題目一</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">total = 0
for i in range(1, 101):  # range(1, 101) 代表從 1 到 100
    total += i
print(total)</pre>
<p><br/><br/></p>
<p><a href="https://mdecp2024.github.io/hw-Zxc535789/content/Brython.html?src=https://gist.githubusercontent.com/Zxc535789/d6bba4afc0746a27de0e75fd6e8a6ed6/raw/81dc55f391d1e1eb4328a4331d66305ab065c693/w15%2520%25E4%25BD%259C%25E6%25A5%25AD%25E4%25BA%258C">題目二</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false"># 定義一個 addto 函數來計算總和
def addto(start, end):
    total = 0
    for i in range(start, end + 1):
        total += i
    return total

# 輸入兩個數字
num1 = int(input("請輸入第一個數字: "))
num2 = int(input("請輸入第二個數字: "))

# 確保 num1 小於 num2
start = min(num1, num2)
end = max(num1, num2)

# 計算總和
sum = addto(start, end)

print(f"{num1} 到 {num2} 之間所有數字的總和是: {sum}")
</pre>
<p></p>
<h1>HW 2</h1>
<h4>主題: Python 的數列、判斷式與重複迴圈 (20%)<span style="background-color: #ffff99;"><br/></span></h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 2 and Part 3</p>
<hr/>
<p>延續 HW 1 網頁資料整理與程式練習方法, 整理下列內容 (20%):</p>
<p>PART 2: Introduction to lists and if/else statements</p>
<p>PART 3: Introduction to the for loop</p>
<p>完成上述流程整理後, 請將 HW2 自評分數輸入 cp2024 自評表單中.</p>
<p></p>
<p></p>
<p></p>
<h2>HW 2 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 2 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w16_exam1</h3>
<p><a href="https://mdecp2024.github.io/hw-Zxc535789/content/Brython.html?src=https://gist.githubusercontent.com/Zxc535789/d6bba4afc0746a27de0e75fd6e8a6ed6/raw/99febb7b5f36f54a5ed0ffb33023b8218d7ac858/w16_exam1">exam1 程式連結</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import document, html
import math
# 初始化 HTML，確保 canvas 元素存在
def setup_canvas():
    if not document.querySelector("#my_canvas"):
        canvas = html.CANVAS(id="my_canvas", width=800, height=600)
        document &lt;= canvas
setup_canvas()
 
# Set up canvas
canvas = document["my_canvas"]
ctx = canvas.getContext("2d")
 
# Set origin (32, 13)
origin_x, origin_y = 32, 13    
 
# Draw X-axis
ctx.beginPath()
ctx.moveTo(origin_x, origin_y)
ctx.lineTo(500, origin_y)
ctx.strokeStyle = "black"
ctx.lineWidth = 2
ctx.stroke()
 
# Draw Y-axis
ctx.beginPath()
ctx.moveTo(origin_x, origin_y)
ctx.lineTo(origin_x, 300)
ctx.stroke()
 
# Label origin
ctx.font = "12px Arial"
ctx.fillStyle = "black"
ctx.fillText("(32, 13)", origin_x + 5, origin_y - 5)
 
# Draw shapes
# Adjusted placement to fix alignment issue
 
# Hexagon (Orange)
hex_x, hex_y = 100, 100
ctx.beginPath()
for i in range(6):
    angle = i * (2 * math.pi / 6)
    x = hex_x + 30 * math.cos(angle)
    y = hex_y + 30 * math.sin(angle)
    if i == 0:
        ctx.moveTo(x, y)
    else:
        ctx.lineTo(x, y)
ctx.closePath()
ctx.fillStyle = "orange"
ctx.fill()
 
# Diamond (Teal)
ctx.beginPath()
ctx.moveTo(160, 70)
ctx.lineTo(180, 100)
ctx.lineTo(160, 130)
ctx.lineTo(140, 100)
ctx.closePath()
ctx.fillStyle = "teal"
ctx.fill()
 
# Triangle (Teal)
ctx.beginPath()
ctx.moveTo(165, 130)
ctx.lineTo(205, 130)
ctx.lineTo(185, 100)
ctx.closePath()
ctx.fillStyle = "blue"
ctx.fill()
 
# Circle (Pink)
ctx.beginPath()
ctx.arc(230, 100, 30, 0, 2 * math.pi)
ctx.fillStyle = "pink"
ctx.fill()
 
# Square (Yellow)
ctx.beginPath()
ctx.rect(265, 75, 50, 50)
ctx.fillStyle = "yellow"
ctx.fill()
 
# Rectangle (Blue)
ctx.beginPath()
ctx.rect(320, 90, 60, 20)
ctx.fillStyle = "Blue"
ctx.fill()</pre>
<p></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/SBB32VqquK8?si=nQkZ6xcXgdHHtJml" title="YouTube video player" width="560"></iframe></p><h1>HW 3</h1>
<h4>主題: Python 的數字、演算法與迴圈 (20%)</h4>
<p style="padding-left: 30px;">Python 課程教材: <a href="https://www.learnpythonwithjupyter.com/">https://www.learnpythonwithjupyter.com/</a> - PART 4 and Part 5</p>
<p>完成上述流程整理後, 請將 HW3 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 3 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 3 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<h3>w16_exam2</h3>
<p><a href="https://mdecp2024.github.io/hw-Zxc535789/content/Brython.html?src=https://gist.githubusercontent.com/Zxc535789/d6bba4afc0746a27de0e75fd6e8a6ed6/raw/be08002bdde8ed1d217d1df7066827d882f5810e/w16_exam2">exam2 程式連結</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc
import math


def draw_maze(angle_degrees):
    # 创建和添加画布
    canvas = html.CANVAS(width=1200, height=1200)
    brython_div = doc["brython_div1"]
    brython_div &lt;= canvas

    # 获取绘图上下文
    ctx = canvas.getContext("2d")

    # 设置绘图参数
    pixel_scale = 100
    offset_x = 32 * 2
    offset_y = 13 * 2
    # 整体向右移动的偏移量
    move_right_offset = 200
    angle_radians = math.radians(angle_degrees)

    # 定义迷宫线条
    lines = [
        ((0, 0), (1, 0)),
        ((2, 0), (5, 0)),
        ((5, 0), (5, 5)),
        ((3, 5), (5, 5)),
        ((4, 5), (4, 3)),
        ((2, 3), (4, 3)),
        ((1, 3), (1, 5)),
        ((3, 3), (3, 2)),
        ((0, 0), (0, 5)),
        ((0, 5), (2, 5)),
        ((2, 5), (2, 4)),
        ((2, 4), (3, 4)),
        ((0, 2), (1, 2)),
        ((2, 2), (2, 1)),
        ((0, 1), (4, 1)),
        ((4, 1), (4, 2)),
    ]

    # 旋转并绘制迷宫线条
    ctx.strokeStyle = "blue"
    ctx.lineWidth = 2
    for line in lines:
        start = line[0]
        end = line[1]

        # 旋转起点坐标
        start_x_rotated = start[0] * pixel_scale * math.cos(angle_radians) - start[1] * pixel_scale * math.sin(
            angle_radians)
        start_y_rotated = start[0] * pixel_scale * math.sin(angle_radians) + start[1] * pixel_scale * math.cos(
            angle_radians)

        # 旋转终点坐标
        end_x_rotated = end[0] * pixel_scale * math.cos(angle_radians) - end[1] * pixel_scale * math.sin(
            angle_radians)
        end_y_rotated = end[0] * pixel_scale * math.sin(angle_radians) + end[1] * pixel_scale * math.cos(
            angle_radians)

        ctx.beginPath()
        ctx.moveTo(
            offset_x + move_right_offset + start_x_rotated,
            offset_y + start_y_rotated
        )
        ctx.lineTo(
            offset_x + move_right_offset + end_x_rotated,
            offset_y + end_y_rotated
        )
        ctx.stroke()

    return ctx, offset_x + move_right_offset, offset_y


def label_coordinate(ctx, offset_x, offset_y, text_angle_degrees):
    text_angle_radians = math.radians(text_angle_degrees)
    ctx.font = "18px Arial"
    ctx.fillStyle = "red"
    # 原始文本位置
    original_x = offset_x + 10
    original_y = offset_y - 15
    # 旋转后的文本位置
    rotated_x = original_x * math.cos(text_angle_radians) - original_y * math.sin(text_angle_radians)
    rotated_y = original_x * math.sin(text_angle_radians) + original_y * math.cos(text_angle_radians)
    ctx.save()
    ctx.translate(offset_x, offset_y)
    ctx.rotate(text_angle_radians)
    ctx.fillText("(32, 13)", 10, - 15)
    ctx.restore()


if __name__ == "__main__":
    # 调整迷宫角度，这里设置为30度，可以根据需要修改
    maze_angle = 0
    # 文本角度
    text_angle = 0
    ctx, offset_x, offset_y = draw_maze(maze_angle)
    label_coordinate(ctx, offset_x, offset_y, text_angle)
</pre>
<p></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/-i4LNqMt_aA?si=YL9zuQD7GubjO13Y" title="YouTube video player" width="560"></iframe></p><h3>W5</h3>
<p></p>
<pre class="brush:html;auto-links:false;toolbar:false" contenteditable="false">#help(range)
for i in range(1, 6, 2):
print(i, end="")
print()


# 設定金字塔的高度
height= 30

使用for迴圈列印金字塔
for i in range(height):
# 列印空格
print(' ' * (height - i - 1 + 2), end=' ')#增加兩個空格
# 列印星號
print('*' * (2 * i + 1))</pre>
<p><br/><br/><br/></p>
<p> </p>
<p></p>
<h3>help(print)</h3>
<div>
<div class="syntaxhighlighter py" id="highlighter_63419">
<table border="0" cellpadding="0" cellspacing="0">
<tbody>
<tr style="height: 162.458px;">
<td class="gutter" style="height: 162.458px;">
<h3>1</h3>
<h3>2</h3>
<h3>3</h3>
<h3>4</h3>
<h3>5</h3>
<h3>6</h3>
<h3>7</h3>
<h3>8</h3>
<h3>9</h3>
<h3>10</h3>
<h3>11</h3>
</td>
<td class="code" style="height: 162.458px;">
<div class="container"><br/><code class="py functions">Help</code> <code class="py plain">on built</code><code class="py keyword">-</code><code class="py keyword">in</code> <code class="py plain">function </code><code class="py functions">print</code> <code class="py keyword">in</code> <code class="py plain">module builtins:</code> <br/><code class="py functions">print</code><code class="py plain">(...)</code> <br/><code class="py spaces">    </code><code class="py functions">print</code><code class="py plain">(value, ..., sep</code><code class="py keyword">=</code><code class="py string">' '</code><code class="py plain">, end</code><code class="py keyword">=</code><code class="py string">'\n'</code><code class="py plain">, </code><code class="py functions">file</code><code class="py keyword">=</code><code class="py plain">sys.stdout, flush</code><code class="py keyword">=</code><code class="py color1">False</code><code class="py plain">)</code> <br/><code class="py spaces">    </code>  <br/><code class="py spaces">    </code><code class="py plain">Prints the values to a stream, </code><code class="py keyword">or</code> <code class="py plain">to sys.stdout by default.</code> <br/><code class="py spaces">    </code><code class="py plain">Optional keyword arguments:</code> <br/><code class="py spaces">    </code><code class="py functions">file</code><code class="py plain">:  a </code><code class="py functions">file</code><code class="py keyword">-</code><code class="py plain">like </code><code class="py functions">object</code> <code class="py plain">(stream); defaults to the current sys.stdout.</code> <br/><code class="py spaces">    </code><code class="py plain">sep:   string inserted between values, default a space.</code> <br/><code class="py spaces">    </code><code class="py plain">end:   string appended after the last value, default a newline.</code> <br/><code class="py spaces">    </code><code class="py plain">flush: whether to forcibly flush the stream.</code></div>
</td>
</tr>
</tbody>
</table>
</div>
</div>
<p></p>
<h3>w8</h3>
<p>今天做的東西</p>
<p>操作步驟:</p>
<ol>
<li>下載 <a href="http://229.cycu.org/python_2025_lite.7z">python_2025_lite.7z</a> (可攜程式環境)</li>
<li>下載<span> </span><a href="https://mde.tw/cp2024/downloads/zmq_remote_api_ex_cube_triangle.7z">zmq_remote_api_ex_cube_triangle.7z</a> (利用 Python 控制模擬場景中的物件)</li>
<li>進入可攜程式環境中 data/CoppeliaSim 目錄, 開啟 coppeliaSim.exe (機電整合模擬程式,<span> </span><a href="https://github.com/CoppeliaRobotics">原始碼</a>)</li>
<li>啟動可攜程式環境, 雙點擊 start_ipv6.bat, 系統會啟動四個命令列, 兩個 SciTE 編輯器</li>
<li>執行場景控制程式前, 先處理操作系統的防火牆, 將下列指令存為 .bat 檔案後, 以管理員身分執行, 以便開啟 23000-23050 埠號進出:</li>
<li>netsh advfirewall firewall add rule name="allow_23000-23050" dir=in action=allow protocol=TCP localport=23000-23050<br/>netsh advfirewall firewall add rule name="allow_23000-23050" dir=out action=allow protocol=TCP localport=23000-23050</li>
<li>開啟 CoppeliaSim 中的視覺串流伺服器: Modules - Connectivity - Visualization stream</li>
<li>利用 SciTE 開啟 put_cubes_into_scene_1.py, 利用 Tools - Go 執行操控程式</li>
<li>使用者可以透過瀏覽器, 以模擬場景所在電腦的 IP, 且埠號為 23020 觀看模擬場景</li>
</ol>
<p>我的程式</p>
<p>from coppeliasim_zmqremoteapi_client import RemoteAPIClient<br/>import time<br/>import keyboard</p>
<p># 利用 zmqRemoteAPI 以 23000 對場景伺服器進行連線<br/>client = RemoteAPIClient('120.113.99.10', 23000)<br/># 以 getObject 方法取得場景物件<br/>sim = client.getObject('sim')<br/>box = sim.getObject('/box')</p>
<p># 啟動模擬<br/>sim.startSimulation()</p>
<p># 設定立方體的尺寸和初始位置<br/>cube_size = 0.2 # 20 cm<br/>spacing = 0.5 # 50 cm 之間的距離（可根據需求調整）</p>
<p># 擺放立方體的行數和每行的數量<br/>rows = 5 # 從第 1 行到第 5 行<br/>cubes_in_row = [1, 3, 5, 7, 9] # 每行立方體的數量</p>
<p># 在正的 Y 方向擺放立方體<br/>for row in range(rows):<br/> # 計算每行的起始 x 位置，讓其對稱<br/> start_row_x = - (cubes_in_row[row] - 1) * spacing / 2<br/> <br/> for col in range(cubes_in_row[row]):<br/> # 計算每個立方體的位置<br/> x_position = start_row_x + col * spacing<br/> y_position = row * spacing # 垂直方向上每行間距<br/> <br/> # 建立立方體<br/> cube_handle = sim.createPrimitiveShape(sim.primitiveshape_cuboid, [cube_size, cube_size, cube_size], 0)<br/> sim.setObjectPosition(cube_handle, -1, [x_position, y_position, cube_size / 2]) # z 方向上升到立方體的中心</p>
<p># 在負的 Y 方向擺放立方體<br/>for row in range(rows):<br/> # 計算每行的起始 x 位置，讓其對稱<br/> start_row_x = - (cubes_in_row[row] - 1) * spacing / 2<br/> <br/> for col in range(cubes_in_row[row]):<br/> # 計算每個立方體的位置<br/> x_position = start_row_x + col * spacing<br/> y_position = -row * spacing # 負的 Y 方向<br/> <br/> # 建立立方體<br/> cube_handle = sim.createPrimitiveShape(sim.primitiveshape_cuboid, [cube_size, cube_size, cube_size], 0)<br/> sim.setObjectPosition(cube_handle, -1, [x_position, y_position, cube_size / 2]) # z 方向上升到立方體的中心</p>
<p># 完成立方體的擺放<br/>print("立方體已成功擺放!")</p>
<p># 設定主迴圈<br/>while True:<br/> # 在這裡可以進行其他模擬操作<br/> time.sleep(0.1) # 確保循環不會過快</p>
<p>if keyboard.is_pressed('q'):<br/> # 可以按下 q 鍵跳出重複執行迴圈<br/> break</p>
<p><br/>終止模擬<br/>sim.stopSimulation()</p>
<p></p>
<p><img alt="" height="288" src="/images/螢幕擷取畫面 2024-10-16 122058.png" width="512"/></p>
<h1>HW 4</h1>
<h4>主題: 利用 Python 控制機電模擬系統 (20%)</h4>
<p style="padding-left: 30px;">利用 <a href="https://solvespace.com/">https://solvespace.com/</a> 建立機械系統零組件</p>
<p style="padding-left: 30px;">利用 <a href="https://www.coppeliarobotics.com/">CoppeliaSim</a> 建立機電模擬系統</p>
<p style="padding-left: 30px;">利用 <a href="https://manual.coppeliarobotics.com/en/zmqRemoteApiOverview.htm">Python</a> 跨網路控制瀏覽器上的機電模擬系統</p>
<p style="padding-left: 30px;">範例:</p>
<p style="padding-left: 60px;"><a href="/downloads/cd2023_pj3ag4_zmq_football_4.7.7z">cd2023_pj3ag4_zmq_football_4.7.7z</a></p>
<p style="padding-left: 60px;"><a href="https://localhost:9446/downloads/cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z">cd2024_2b_g6_steel_ball_platform_nxopen_copsim.7z</a></p>
<p>完成上述流程整理後, 請將 HW4 自評分數輸入 cp2024 自評表單中.</p>
<h2>HW 4 Exam</h2>
<p>每六人為一組進行協同程式練習</p>
<p>透過 Jupyterlab 協同網頁, 輪流指定各組編寫 HW 4 相關的程式練習, 以及網頁內容 (localhost 與 Codespaces 環境)編輯.</p>
<p><br/>&lt;h1&gt;Brython&lt;/h1&gt; &lt;p&gt;從 1 累加到 100:&lt;/p&gt; &lt;p&gt;&lt;button id="add1to100"&gt;1 add to 100&lt;/button&gt;&lt;/p&gt; &lt;!-- 導入 brython 程式庫 --&gt; &lt;p&gt; &lt;script src="/static/brython.js"&gt;&lt;/script&gt; &lt;script src="/static/brython_stdlib.js"&gt;&lt;/script&gt; &lt;/p&gt; &lt;!-- 啟動 Brython --&gt; &lt;p&gt; &lt;script&gt;// &lt;![CDATA[ window.onload=function(){ brython({debug:1, pythonpath:['/static/','./../downloads/py/']}); } // ]]&gt;&lt;/script&gt; &lt;/p&gt; &lt;p&gt;&lt;!-- 導入 FileSaver 與 filereader --&gt;&lt;/p&gt; &lt;p&gt; &lt;script type="text/javascript" src="/static/ace/FileSaver.min.js"&gt;&lt;/script&gt; &lt;script type="text/javascript" src="/static/ace/filereader.js"&gt;&lt;/script&gt; &lt;/p&gt; &lt;p&gt;&lt;!-- 導入 ace --&gt;&lt;/p&gt; &lt;p&gt; &lt;script type="text/javascript" src="/static/ace/ace.js"&gt;&lt;/script&gt; &lt;script type="text/javascript" src="/static/ace/ext-language_tools.js"&gt;&lt;/script&gt; &lt;script type="text/javascript" src="/static/ace/mode-python3.js"&gt;&lt;/script&gt; &lt;script type="text/javascript" src="/static/ace/snippets/python.js"&gt;&lt;/script&gt; &lt;/p&gt; &lt;p&gt;&lt;!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 --&gt; &lt;script src="/static/Cango-24v03-min.js"&gt;&lt;/script&gt; &lt;script src="/static/gearUtils-09.js"&gt;&lt;/script&gt; &lt;script src="/static/SVGpathUtils-6v03-min.js"&gt;&lt;/script&gt; &lt;script src="/static/sylvester.js"&gt;&lt;/script&gt; &lt;script src="/static/PrairieDraw.js"&gt;&lt;/script&gt; &lt;/p&gt; &lt;p&gt;&lt;!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--&gt;&lt;/p&gt; &lt;p&gt; &lt;script type="text/javascript"&gt;// &lt;![CDATA[ function doSave(storage_id, filename){ var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"}); filename = document.getElementById(filename).value saveAs(blob, filename+".py"); } // ]]&gt;&lt;/script&gt; &lt;/p&gt; &lt;p&gt; &lt;script type="text/python3"&gt;// &lt;![CDATA[ from browser import document as doc import ace # 清除畫布 def clear_bd1(ev): bd = doc["brython_div1"] bd.clear() Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" ) # 從 gist 取出程式碼後, 放入 editor 作為 default 程式 def run1(): # 利用 get 取下 src 變數值 try: url = doc.query["src"] except: url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py" prog = open(url).read() # 將程式載入編輯區 Ace1.editor.setValue(prog) Ace1.editor.scrollToRow(0) Ace1.editor.gotoLine(0) # 直接執行程式 #ns = {'__name__':'__main__'} #exec(prog, ns) # 按下 run 按鈕 Ace1.run() # 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定 doc['kw_run1'].bind('click', Ace1.run) doc['kw_show_console1'].bind('click', Ace1.show_console) doc['kw_clear_console1'].bind('click', Ace1.clear_console) doc['clear_bd1'].bind('click', clear_bd1) # 呼叫函式執行 run1() // ]]&gt;&lt;/script&gt; &lt;/p&gt; &lt;p&gt;&lt;!-- add 1 to 100 開始 --&gt; &lt;script type="text/python3"&gt;// &lt;![CDATA[ from browser import document as doc import ace # 清除畫布 def clear_bd1(ev): bd = doc["brython_div1"] bd.clear() # 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件 Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" ) add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py" # 從 gist 取得程式碼 add_src = open(add1to100_url).read() def add(ev): Ace2.editor.setValue(add_src) Ace2.editor.scrollToRow(0) Ace2.editor.gotoLine(0) Ace2.run() # id 為 "add1to100" 的按鈕點按時, 執行 add 方法 doc["add1to100"].bind('click', add) // ]]&gt;&lt;/script&gt; &lt;/p&gt; &lt;p&gt;&lt;!-- add 1 to 100 結束--&gt;&lt;/p&gt; &lt;!-- editor1 開始 --&gt; &lt;p&gt;&lt;!-- 用來顯示程式碼的 editor 區域 --&gt;&lt;/p&gt; &lt;div id="kw_editor1" style="width: 600px; height: 300px;"&gt;&lt;/div&gt; &lt;p&gt;&lt;!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --&gt;&lt;/p&gt; &lt;p&gt;&lt;!-- 存擋表單開始 --&gt;&lt;/p&gt; &lt;form&gt;&lt;label&gt;Filename: &lt;input id="kw_filename" placeholder="input file name" type="text"&gt;.py&lt;/label&gt; &lt;input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"&gt;&lt;/form&gt; &lt;p&gt;&lt;!-- 存擋表單結束 --&gt;&lt;/p&gt; &lt;p&gt;&lt;/p&gt; &lt;p&gt;&lt;!-- 執行與清除按鈕開始 --&gt;&lt;/p&gt; &lt;p&gt;&lt;button id="kw_run1"&gt;Run&lt;/button&gt; &lt;button id="kw_show_console1"&gt;Output&lt;/button&gt; &lt;button id="kw_clear_console1"&gt;清除輸出區&lt;/button&gt;&lt;button id="clear_bd1"&gt;清除繪圖區&lt;/button&gt;&lt;button onclick="window.location.reload()"&gt;Reload&lt;/button&gt;&lt;/p&gt; &lt;p&gt;&lt;!-- 執行與清除按鈕結束 --&gt;&lt;/p&gt; &lt;p&gt;&lt;/p&gt; &lt;p&gt;&lt;!-- 程式執行 ouput 區 --&gt;&lt;/p&gt; &lt;div style="width: 100%; height: 100%;"&gt;&lt;textarea autocomplete="off" id="kw_console1"&gt;&lt;/textarea&gt;&lt;/div&gt; &lt;p&gt;&lt;!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --&gt;&lt;/p&gt; &lt;div id="brython_div1"&gt;&lt;/div&gt; &lt;!-- editor1 結束 --&gt;&lt;hr&gt;&lt;!-- ########################################## --&gt; &lt;p&gt;從 1 累加到 100 part2:&lt;/p&gt; &lt;p&gt;&lt;button id="add1to100part2"&gt;1 add to 100&lt;/button&gt;&lt;button id="cango_three_gears"&gt;cango_three_gears&lt;/button&gt;&lt;button id="bsnake"&gt;BSnake&lt;/button&gt;&lt;button id="aitetris"&gt;AI Tetris&lt;/button&gt;&lt;button id="threejsblock"&gt;Rotating Block&lt;/button&gt;&lt;/p&gt; &lt;p&gt;&lt;!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--&gt;&lt;/p&gt; &lt;p&gt; &lt;script type="text/python3"&gt;// &lt;![CDATA[ from browser import document as doc import ace # 清除畫布 def clear_bd2(ev): bd = doc["brython_div2"] bd.clear() Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" ) # 從 gist 取出程式碼後, 放入 editor 作為 default 程式 def run2(): # 利用 get 取下 src 變數值 try: url = doc.query["src2"] except: url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py" prog = open(url).read() # 將程式載入編輯區 Ace3.editor.setValue(prog) Ace3.editor.scrollToRow(0) Ace3.editor.gotoLine(0) # 直接執行程式 #ns = {'__name__':'__main__'} #exec(prog, ns) # 按下 run 按鈕 Ace3.run() # 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定 doc['kw_run2'].bind('click', Ace3.run) doc['kw_show_console2'].bind('click', Ace3.show_console) doc['kw_clear_console2'].bind('click', Ace3.clear_console) doc['clear_bd2'].bind('click', clear_bd2) # 呼叫函式執行 run2() // ]]&gt;&lt;/script&gt; &lt;/p&gt; &lt;p&gt;&lt;!-- add 1 to 100 part2 開始 --&gt; &lt;script type="text/python3"&gt;// &lt;![CDATA[ from browser import document as doc import ace # 清除畫布 def clear_bd2(ev): bd = doc["brython_div2"] bd.clear() # 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件 Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" ) # 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區 class button2: def __init__(self, url): self.url = url # 記得加入 event 輸入變數 def do(self,ev): Ace4.editor.setValue(open(self.url).read()) Ace4.editor.scrollToRow(0) Ace4.editor.gotoLine(0) Ace4.run() add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py" # 從 gist 取得程式碼 add_src = open(add1to100_url).read() def add2(ev): Ace4.editor.setValue(add_src) Ace4.editor.scrollToRow(0) Ace4.editor.gotoLine(0) Ace4.run() # id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法 doc["add1to100part2"].bind('click', add2) # 以下為運用 button2 class 的通用 gist 程式導入區 ################################## cango_three_gears start cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py" cango_three_gears = button2(cango_three_gears_url) doc["cango_three_gears"].bind("click", cango_three_gears.do) ################################## cango_three_gears end ################################## bsnake start bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py" bsnake = button2(bsnake_url) doc["bsnake"].bind("click", bsnake.do) ################################## bsnake end ################################## aitetris start aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py" aitetris = button2(aitetris_url) doc["aitetris"].bind("click", aitetris.do) ################################## aitetris end ################################## threejsblock start threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py" threejsblock = button2(threejsblock_url) doc["threejsblock"].bind("click", threejsblock.do) ################################## threejsblock end // ]]&gt;&lt;/script&gt; &lt;/p&gt; &lt;p&gt;&lt;!-- add 1 to 100 part2 結束--&gt;&lt;/p&gt; &lt;!-- editor2 開始 --&gt; &lt;p&gt;&lt;!-- 用來顯示程式碼的 editor 區域 --&gt;&lt;/p&gt; &lt;div id="kw_editor2" style="width: 600px; height: 300px;"&gt;&lt;/div&gt; &lt;p&gt;&lt;!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --&gt;&lt;/p&gt; &lt;p&gt;&lt;!-- 存擋表單開始 --&gt;&lt;/p&gt; &lt;form&gt;&lt;label&gt;Filename: &lt;input id="kw_filename2" placeholder="input file name" type="text"&gt;.py&lt;/label&gt; &lt;input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"&gt;&lt;/form&gt; &lt;p&gt;&lt;!-- 存擋表單結束 --&gt;&lt;/p&gt; &lt;p&gt;&lt;/p&gt; &lt;p&gt;&lt;!-- 執行與清除按鈕開始 --&gt;&lt;/p&gt; &lt;p&gt;&lt;button id="kw_run2"&gt;Run&lt;/button&gt; &lt;button id="kw_show_console2"&gt;Output&lt;/button&gt; &lt;button id="kw_clear_console2"&gt;清除輸出區&lt;/button&gt;&lt;button id="clear_bd2"&gt;清除繪圖區&lt;/button&gt;&lt;button onclick="window.location.reload()"&gt;Reload&lt;/button&gt;&lt;/p&gt; &lt;p&gt;&lt;!-- 執行與清除按鈕結束 --&gt;&lt;/p&gt; &lt;p&gt;&lt;/p&gt; &lt;p&gt;&lt;!-- 程式執行 ouput 區 --&gt;&lt;/p&gt; &lt;div style="width: 100%; height: 100%;"&gt;&lt;textarea autocomplete="off" id="kw_console2"&gt;&lt;/textarea&gt;&lt;/div&gt; &lt;p&gt;&lt;!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --&gt;&lt;/p&gt; &lt;div id="brython_div2"&gt;&lt;/div&gt; &lt;!-- editor2 結束 --&gt;&lt;hr&gt; &lt;p&gt; &lt;script type="text/javascript" src="https://unpkg.com/three@0.144.0/build/three.js"&gt;&lt;/script&gt; &lt;/p&gt;<br/><br/><br/><br/></p><h3>w16_exam3</h3>
<p><a href="https://mdecp2024.github.io/hw-Zxc535789/content/Brython.html?src=https://gist.githubusercontent.com/Zxc535789/d6bba4afc0746a27de0e75fd6e8a6ed6/raw/2b1e84778c3d014a8a6e3796dc6c7b6f7898258f/w16_exam3">exam3</a></p>
<pre class="brush:py;auto-links:false;toolbar:false" contenteditable="false">from browser import html
from browser import document as doc
import math
 
 
def draw_maze(angle_degrees):
    # 创建和添加画布
    canvas = html.CANVAS(width=1200, height=1200)
    brython_div = doc["brython_div1"]
    brython_div &lt;= canvas
 
    # 获取绘图上下文
    ctx = canvas.getContext("2d")
 
    # 设置绘图参数
    pixel_scale = 100
    offset_x = 32 * 2
    offset_y = 13 * 2
    # 整体向右移动的偏移量
    move_right_offset = 200
    angle_radians = math.radians(angle_degrees)
 
    # 定义迷宫线条
    lines = [
        ((0, 0), (1, 0)),
        ((2, 0), (5, 0)),
        ((5, 0), (5, 5)),
        ((3, 5), (5, 5)),
        ((4, 5), (4, 3)),
        ((2, 3), (4, 3)),
        ((1, 3), (1, 5)),
        ((3, 3), (3, 2)),
        ((0, 0), (0, 5)),
        ((0, 5), (2, 5)),
        ((2, 5), (2, 4)),
        ((2, 4), (3, 4)),
        ((0, 2), (1, 2)),
        ((2, 2), (2, 1)),
        ((0, 1), (4, 1)),
        ((4, 1), (4, 2)),
    ]
 
    # 旋转并绘制迷宫线条
    ctx.strokeStyle = "blue"
    ctx.lineWidth = 2
    for line in lines:
        start = line[0]
        end = line[1]
 
        # 旋转起点坐标
        start_x_rotated = start[0] * pixel_scale * math.cos(angle_radians) - start[1] * pixel_scale * math.sin(
            angle_radians)
        start_y_rotated = start[0] * pixel_scale * math.sin(angle_radians) + start[1] * pixel_scale * math.cos(
            angle_radians)
 
        # 旋转终点坐标
        end_x_rotated = end[0] * pixel_scale * math.cos(angle_radians) - end[1] * pixel_scale * math.sin(
            angle_radians)
        end_y_rotated = end[0] * pixel_scale * math.sin(angle_radians) + end[1] * pixel_scale * math.cos(
            angle_radians)
 
        ctx.beginPath()
        ctx.moveTo(
            offset_x + move_right_offset + start_x_rotated,
            offset_y + start_y_rotated
        )
        ctx.lineTo(
            offset_x + move_right_offset + end_x_rotated,
            offset_y + end_y_rotated
        )
        ctx.stroke()
 
    return ctx, offset_x + move_right_offset, offset_y, pixel_scale
 
 
def find_path():
    # 简单的路径示例，这里假设的路径，实际需要更复杂的算法
    # 为了维持原本迷宫路线，这里路径假设不破坏迷宫已有路线
    path = [
        ((1.5, 0), (1.5, 0.5)),
        ((1.5, 0.5), (4.5, 0.5)),
        ((4.5, 0.5), (4.5, 2.5)),
        ((4.5, 2.5), (3.5, 2.5)),
        ((3.5, 2.5), (3.5, 1.5)),
        ((3.5, 1.5), (2.5, 1.5)),
        ((2.5, 1.5), (2.5, 2.5)),
        ((2.5, 2.5), (1.5, 2.5)),
        ((1.5, 2.5), (1.5, 3.5)),
        ((1.5, 3.5), (3.5, 3.5)),
        ((3.5, 3.5), (3.5, 4.5)),
        ((3.5, 4.5), (2.5, 4.5)),
        ((2.5, 4.5), (2.5, 5))
    ]
    return path
 
 
def draw_path(ctx, offset_x, offset_y, angle_degrees, path, pixel_scale):
    angle_radians = math.radians(angle_degrees)
    ctx.strokeStyle = "red"
    ctx.lineWidth = 2
    for line in path:
        start = line[0]
        end = line[1]
 
        # 旋转起点坐标
        start_x_rotated = start[0] * pixel_scale * math.cos(angle_radians) - start[1] * pixel_scale * math.sin(
            angle_radians)
        start_y_rotated = start[0] * pixel_scale * math.sin(angle_radians) + start[1] * pixel_scale * math.cos(
            angle_radians)
 
        # 旋转终点坐标
        end_x_rotated = end[0] * pixel_scale * math.cos(angle_radians) - end[1] * pixel_scale * math.sin(
            angle_radians)
        end_y_rotated = end[0] * pixel_scale * math.sin(angle_radians) + end[1] * pixel_scale * math.cos(
            angle_radians)
 
        ctx.beginPath()
        ctx.moveTo(
            offset_x + start_x_rotated,
            offset_y + start_y_rotated
        )
        ctx.lineTo(
            offset_x + end_x_rotated,
            offset_y + end_y_rotated
        )
        ctx.stroke()
 
 
def label_coordinate(ctx, offset_x, offset_y, text_angle_degrees):
    text_angle_radians = math.radians(text_angle_degrees)
    ctx.font = "18px Arial"
    ctx.fillStyle = "red"
    # 原始文本位置
    original_x = offset_x + 10
    original_y = offset_y - 15
    # 旋转后的文本位置
    rotated_x = original_x * math.cos(text_angle_radians) - original_y * math.sin(text_angle_radians)
    rotated_y = original_x * math.sin(text_angle_radians) + original_y * math.cos(text_angle_radians)
    ctx.save()
    ctx.translate(offset_x, offset_y)
    ctx.rotate(text_angle_radians)
    ctx.fillText("(32, 13)", 10, - 15)
    ctx.restore()
 
 
if __name__ == "__main__":
    # 调整迷宫角度，这里设置为30度，可以根据需要修改
    maze_angle = 0
    # 文本角度
    text_angle = 0
    ctx, offset_x, offset_y, pixel_scale = draw_maze(maze_angle)
    path = find_path()
    draw_path(ctx, offset_x, offset_y, maze_angle, path, pixel_scale)
    label_coordinate(ctx, offset_x, offset_y, text_angle)</pre>
<p><br/><br/></p>
<p><iframe allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen="allowfullscreen" frameborder="0" height="315" referrerpolicy="strict-origin-when-cross-origin" src="https://www.youtube.com/embed/VIyA1uk9C4U?si=p7crgFbgTWwZoBK8" title="YouTube video player" width="560"></iframe></p><h1>Final Report</h1>
<p>期末口頭與書面專題報告 (20%)</p>
<p>期末口頭專題報告影片:</p>
<p style="padding-left: 30px;">......</p>
<p>期末書面專題報告檔案 (pdf):</p>
<p style="padding-left: 30px;">......</p>
<p>電腦輔助設計與實習課程總結心得:</p>
<p style="padding-left: 30px;">......</p>
<p>期末報告自評成績:</p>
<p style="padding-left: 30px;">完成上述流程後, 請將 Final Report 自評分數輸入 cp2024 自評表單中.</p><h1>Brython</h1>
<p>從 1 累加到 100:</p>
<p><button id="add1to100">1 add to 100</button></p>
<!-- 導入 brython 程式庫 -->
<p>
<script src="/static/brython.js"></script>
<script src="/static/brython_stdlib.js"></script>
</p>
<!-- 啟動 Brython -->
<p>
<script>
window.onload=function(){
brython({debug:1, pythonpath:['/static/','./../downloads/py/']});
}
</script>
</p>
<p><!-- 導入 FileSaver 與 filereader --></p>
<p>
<script src="/static/ace/FileSaver.min.js" type="text/javascript"></script>
<script src="/static/ace/filereader.js" type="text/javascript"></script>
</p>
<p><!-- 導入 ace --></p>
<p>
<script src="/static/ace/ace.js" type="text/javascript"></script>
<script src="/static/ace/ext-language_tools.js" type="text/javascript"></script>
<script src="/static/ace/mode-python3.js" type="text/javascript"></script>
<script src="/static/ace/snippets/python.js" type="text/javascript"></script>
</p>
<p><!-- 導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫 -->
<script src="/static/Cango-24v03-min.js"></script>
<script src="/static/gearUtils-09.js"></script>
<script src="/static/SVGpathUtils-6v03-min.js"></script>
<script src="/static/sylvester.js"></script>
<script src="/static/PrairieDraw.js"></script>
</p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/javascript">
function doSave(storage_id, filename){
    var blob = new Blob([localStorage[storage_id]], {type: "text/plain;charset=utf-8"});
    filename = document.getElementById(filename).value
    saveAs(blob, filename+".py");
}
</script>
</p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()
Ace1 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run1():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace1.editor.setValue(prog)
    Ace1.editor.scrollToRow(0)
    Ace1.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace1.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run1'].bind('click', Ace1.run)
doc['kw_show_console1'].bind('click', Ace1.show_console)
doc['kw_clear_console1'].bind('click', Ace1.clear_console)
doc['clear_bd1'].bind('click', clear_bd1)
# 呼叫函式執行
run1()
</script>
</p>
<p><!-- add 1 to 100 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd1(ev):
    bd = doc["brython_div1"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace2 = ace.Editor(editor_id="kw_editor1", console_id="kw_console1", container_id="kw__container1", storage_id="kw_py_src1" )

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add(ev):
    Ace2.editor.setValue(add_src)
    Ace2.editor.scrollToRow(0)
    Ace2.editor.gotoLine(0)
    Ace2.run()

# id 為 "add1to100" 的按鈕點按時, 執行 add 方法
doc["add1to100"].bind('click', add)
</script>
</p>
<p><!-- add 1 to 100 結束--></p>
<!-- editor1 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor1" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src1', 'kw_filename1');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run1">Run</button> <button id="kw_show_console1">Output</button> <button id="kw_clear_console1">清除輸出區</button><button id="clear_bd1">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console1"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div1"></div>
<!-- editor1 結束 --><hr/><!-- ########################################## -->
<p>從 1 累加到 100 part2:</p>
<p><button id="add1to100part2">1 add to 100</button><button id="cango_three_gears">cango_three_gears</button><button id="bsnake">BSnake</button><button id="aitetris">AI Tetris</button><button id="threejsblock">Rotating Block</button></p>
<p><!-- 請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱--></p>
<p>
<script type="text/python3">
from browser import document as doc
import ace
# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()
Ace3 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )
# 從 gist 取出程式碼後, 放入 editor 作為 default 程式
def run2():
    # 利用 get 取下 src 變數值
    try:
        url = doc.query["src2"]
    except:
        url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c3a6deaf717f8f2739a4b1392a5ab10936e9693a/from_1_add_to_10_1.py"
    prog = open(url).read()

    # 將程式載入編輯區
    Ace3.editor.setValue(prog)
    Ace3.editor.scrollToRow(0)
    Ace3.editor.gotoLine(0)
    # 直接執行程式
    #ns = {'__name__':'__main__'}
    #exec(prog, ns)
    # 按下 run 按鈕
    Ace3.run()

# 執行程式, 顯示輸出結果與清除輸出結果及對應按鈕綁定
doc['kw_run2'].bind('click', Ace3.run)
doc['kw_show_console2'].bind('click', Ace3.show_console)
doc['kw_clear_console2'].bind('click', Ace3.clear_console)
doc['clear_bd2'].bind('click', clear_bd2)
# 呼叫函式執行
run2()
</script>
</p>
<p><!-- add 1 to 100 part2 開始 -->
<script type="text/python3">
from browser import document as doc
import ace

# 清除畫布
def clear_bd2(ev):
    bd = doc["brython_div2"]
    bd.clear()

# 利用 ace 中的 Editor 建立 Ace2 物件, 其中的輸入變數分別對應到頁面中的編輯區物件
Ace4 = ace.Editor(editor_id="kw_editor2", console_id="kw_console2", container_id="kw__container2", storage_id="kw_py_src2" )

# 透過 Ace4 以類別建立一個通用的 button2, 可以在多個案例中將 gist 程導入編輯區

class button2:
    def __init__(self, url):
        self.url = url

    # 記得加入 event 輸入變數
    def do(self,ev):
        Ace4.editor.setValue(open(self.url).read())
        Ace4.editor.scrollToRow(0)
        Ace4.editor.gotoLine(0)
        Ace4.run()

add1to100_url = "https://gist.githubusercontent.com/mdecourse/0229a8a017091476a79700b8a190f185/raw/c48e37714f055c3a0027cbfef59e442a6ef659b9/from_1_add_to_100_1.py"

# 從 gist 取得程式碼
add_src = open(add1to100_url).read()
def add2(ev):
    Ace4.editor.setValue(add_src)
    Ace4.editor.scrollToRow(0)
    Ace4.editor.gotoLine(0)
    Ace4.run()

# id 為 "add1to100part2" 的按鈕點按時, 執行 add 方法
doc["add1to100part2"].bind('click', add2)
# 以下為運用 button2 class 的通用 gist 程式導入區
################################## cango_three_gears start
cango_three_gears_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/cango_three_gears_brython_div2.py"
cango_three_gears = button2(cango_three_gears_url)
doc["cango_three_gears"].bind("click", cango_three_gears.do)
################################## cango_three_gears end
################################## bsnake start
bsnake_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/kmol_snakey.py"
bsnake = button2(bsnake_url)
doc["bsnake"].bind("click", bsnake.do)
################################## bsnake end
################################## aitetris start
aitetris_url = "https://gist.githubusercontent.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d/raw/f7a85d737d6723d5e34c526d5daee990ed92c32b/pygame_to_brython_tetris_ai.py"
aitetris = button2(aitetris_url)
doc["aitetris"].bind("click", aitetris.do)
################################## aitetris end
################################## threejsblock start
threejsblock_url = "https://gist.githubusercontent.com/mdecycu/2c6323eff49b496d1bafd210f3ec9707/raw/df37802f9e8a386b6424f7945af622b1cd0a9ca5/threejs_rotating_block.py"
threejsblock = button2(threejsblock_url)
doc["threejsblock"].bind("click", threejsblock.do)
################################## threejsblock end
</script>
</p>
<p><!-- add 1 to 100 part2 結束--></p>
<!-- editor2 開始 -->
<p><!-- 用來顯示程式碼的 editor 區域 --></p>
<div id="kw_editor2" style="width: 600px; height: 300px;"></div>
<p><!-- 以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合 --></p>
<p><!-- 存擋表單開始 --></p>
<form><label>Filename: <input id="kw_filename2" placeholder="input file name" type="text"/>.py</label> <input onclick="doSave('kw_py_src2', 'kw_filename2');" type="submit" value="Save"/></form>
<p><!-- 存擋表單結束 --></p>
<p></p>
<p><!-- 執行與清除按鈕開始 --></p>
<p><button id="kw_run2">Run</button> <button id="kw_show_console2">Output</button> <button id="kw_clear_console2">清除輸出區</button><button id="clear_bd2">清除繪圖區</button><button onclick="window.location.reload()">Reload</button></p>
<p><!-- 執行與清除按鈕結束 --></p>
<p></p>
<p><!-- 程式執行 ouput 區 --></p>
<div style="width: 100%; height: 100%;"><textarea autocomplete="off" id="kw_console2"></textarea></div>
<p><!-- Brython 程式執行的結果, 都以 brython_div1 作為切入位置 --></p>
<div id="brython_div2"></div>
<!-- editor2 結束 --><hr/>
<p>
<script src="https://unpkg.com/three@0.144.0/build/three.js" type="text/javascript"></script>
</p>